
DAC_DRIVER_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c40  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f54  08005f54  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005f54  08005f54  00015f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f5c  08005f5c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f5c  08005f5c  00015f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08005f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  24000078  08005fdc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000178  08005fdc  00020178  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018863  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292d  00000000  00000000  00038909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0003b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  0003c118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ce75  00000000  00000000  0003cf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014359  00000000  00000000  00079d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d559  00000000  00000000  0008e0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020b637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004068  00000000  00000000  0020b688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005ec0 	.word	0x08005ec0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	08005ec0 	.word	0x08005ec0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <_ZN10Mcp4716Dac4InitEv>:
#include "stm32h7xx_hal.h"

/*brief: This function initialize the I2C Protocol
 *
 */
void Mcp4716Dac::Init() {        // virtual functions invoked here
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Init(MCP4716_DAC_INTERFACE);  // check later
 8000710:	4803      	ldr	r0, [pc, #12]	; (8000720 <_ZN10Mcp4716Dac4InitEv+0x18>)
 8000712:	f001 f907 	bl	8001924 <HAL_I2C_Init>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	24000094 	.word	0x24000094

08000724 <_ZN10Mcp4716Dac5WriteEv>:
// invoked in inherit  class
uint16_t Mcp4716Dac::Write() {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af02      	add	r7, sp, #8
 800072a:	6078      	str	r0, [r7, #4]
    return HAL_I2C_Master_Transmit(MCP4716_DAC_INTERFACE, kWriteAdress, data_buffer, MAX_BUFFER_LEN,TIMEOUT_I2C);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	1d1a      	adds	r2, r3, #4
 8000730:	2332      	movs	r3, #50	; 0x32
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	230a      	movs	r3, #10
 8000736:	21c6      	movs	r1, #198	; 0xc6
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <_ZN10Mcp4716Dac5WriteEv+0x28>)
 800073a:	f001 f9b3 	bl	8001aa4 <HAL_I2C_Master_Transmit>
 800073e:	4603      	mov	r3, r0
 8000740:	b29b      	uxth	r3, r3
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	24000094 	.word	0x24000094

08000750 <_ZN10Mcp4716Dac4ReadEv>:
/**
 *
 */
uint16_t Mcp4716Dac::Read() {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af02      	add	r7, sp, #8
 8000756:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Master_Receive(MCP4716_DAC_INTERFACE, kReadAdress, data_buffer, MAX_BUFFER_LEN, TIMEOUT_I2C);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	1d1a      	adds	r2, r3, #4
 800075c:	2332      	movs	r3, #50	; 0x32
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	230a      	movs	r3, #10
 8000762:	21c7      	movs	r1, #199	; 0xc7
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <_ZN10Mcp4716Dac4ReadEv+0x28>)
 8000766:	f001 fa91 	bl	8001c8c <HAL_I2C_Master_Receive>
 800076a:	4603      	mov	r3, r0
 800076c:	b29b      	uxth	r3, r3
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	24000094 	.word	0x24000094

0800077c <_ZN10Mcp4716Dac10SerialDataEv>:

uint16_t Mcp4716Dac::SerialData() {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    return HAL_UART_Transmit(MCP4716_DAC_SERIAL_INTERFACE,data_buffer,MAX_BUFFER_LEN,TIMEOUT_I2C);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1d19      	adds	r1, r3, #4
 8000788:	2332      	movs	r3, #50	; 0x32
 800078a:	220a      	movs	r2, #10
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <_ZN10Mcp4716Dac10SerialDataEv+0x24>)
 800078e:	f004 fa4f 	bl	8004c30 <HAL_UART_Transmit>
 8000792:	4603      	mov	r3, r0
 8000794:	b29b      	uxth	r3, r3
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	240000e0 	.word	0x240000e0

080007a4 <_ZN10Mcp4716Dac6DeInitEv>:

/*brief: this function uses for closing or stopping the i2c protocol
 *
 *
 */
uint16_t Mcp4716Dac::DeInit() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    return HAL_I2C_DeInit(MCP4716_DAC_INTERFACE);
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <_ZN10Mcp4716Dac6DeInitEv+0x1c>)
 80007ae:	f001 f949 	bl	8001a44 <HAL_I2C_DeInit>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29b      	uxth	r3, r3
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	24000094 	.word	0x24000094

080007c4 <_ZN10Mcp4716Dac15GenerateVoltageEt>:
/*
 * Brief: Generating Analog voltage
 */
void Mcp4716Dac::GenerateVoltage(uint16_t dacvalue){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
    Init();
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	4798      	blx	r3
    Write();
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	4798      	blx	r3

	m_voltage=(kVoltageReference*dacvalue)/1024;
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	ee07 3a90 	vmov	s15, r3
 80007ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f0:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 80007f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007f8:	eddf 6a05 	vldr	s13, [pc, #20]	; 8000810 <_ZN10Mcp4716Dac15GenerateVoltageEt+0x4c>
 80007fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	44800000 	.word	0x44800000

08000814 <_ZN10Mcp4716Dac9toggleLedEv>:
void Mcp4716Dac::toggleLed() {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2102      	movs	r1, #2
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <_ZN10Mcp4716Dac9toggleLedEv+0x34>)
 8000822:	f001 f81d 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000826:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082a:	f000 fc4b 	bl	80010c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2102      	movs	r1, #2
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <_ZN10Mcp4716Dac9toggleLedEv+0x34>)
 8000834:	f001 f814 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000838:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083c:	f000 fc42 	bl	80010c4 <HAL_Delay>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	58021000 	.word	0x58021000

0800084c <_ZN7IDriverC1Ev>:

#ifdef __cplusplus
extern "C"{
#endif

class IDriver {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <_ZN7IDriverC1Ev+0x2c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4907      	ldr	r1, [pc, #28]	; (800087c <_ZN7IDriverC1Ev+0x30>)
 800085e:	1d1a      	adds	r2, r3, #4
 8000860:	c903      	ldmia	r1, {r0, r1}
 8000862:	e882 0003 	stmia.w	r2, {r0, r1}
 8000866:	2200      	movs	r2, #0
 8000868:	819a      	strh	r2, [r3, #12]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	08005f18 	.word	0x08005f18
 800087c:	08005ed8 	.word	0x08005ed8

08000880 <_ZN10Mcp4716DacC1Ev>:
#include "IDriver.hpp"
#ifdef __cplusplus
extern "C"{
#endif

class Mcp4716Dac: public IDriver {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ffde 	bl	800084c <_ZN7IDriverC1Ev>
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <_ZN10Mcp4716DacC1Ev+0x20>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	08005efc 	.word	0x08005efc

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008aa:	f000 fb79 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ae:	f000 f861 	bl	8000974 <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <main+0xc8>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	4a2c      	ldr	r2, [pc, #176]	; (800096c <main+0xc8>)
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <main+0xc8>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 fff9 	bl	80018c8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 f80f 	bl	80018fc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008e2:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008e4:	4b21      	ldr	r3, [pc, #132]	; (800096c <main+0xc8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d106      	bne.n	80008fe <main+0x5a>
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	61fa      	str	r2, [r7, #28]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	dd01      	ble.n	80008fe <main+0x5a>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <main+0x5c>
 80008fe:	2300      	movs	r3, #0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d000      	beq.n	8000906 <main+0x62>
 8000904:	e7ee      	b.n	80008e4 <main+0x40>
if ( timeout < 0 )
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	2b00      	cmp	r3, #0
 800090a:	da01      	bge.n	8000910 <main+0x6c>
{
Error_Handler();
 800090c:	f000 f9c0 	bl	8000c90 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 f96a 	bl	8000be8 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000914:	f000 f8ba 	bl	8000a8c <_ZL12MX_I2C1_Initv>
  MX_USART3_UART_Init();
 8000918:	f000 f906 	bl	8000b28 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  Mcp4716Dac mcp4716dac ;  //  Creating an Object
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ffad 	bl	8000880 <_ZN10Mcp4716DacC1Ev>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      mcp4716dac.Init();
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff feec 	bl	8000708 <_ZN10Mcp4716Dac4InitEv>
             mcp4716dac.Write();
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fef5 	bl	8000724 <_ZN10Mcp4716Dac5WriteEv>
             // mcp4716dac.Read();
              mcp4716dac.SerialData();
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff1c 	bl	800077c <_ZN10Mcp4716Dac10SerialDataEv>





             mcp4716dac.toggleLed();
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff63 	bl	8000814 <_ZN10Mcp4716Dac9toggleLedEv>

             mcp4716dac.GenerateVoltage(1020);
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ff34 	bl	80007c4 <_ZN10Mcp4716Dac15GenerateVoltageEt>

       //    HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
       //    HAL_Delay(500);
             HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 800095c:	2101      	movs	r1, #1
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <main+0xcc>)
 8000960:	f000 ff97 	bl	8001892 <HAL_GPIO_TogglePin>
                 HAL_Delay(250);
 8000964:	20fa      	movs	r0, #250	; 0xfa
 8000966:	f000 fbad 	bl	80010c4 <HAL_Delay>
      mcp4716dac.Init();
 800096a:	e7dc      	b.n	8000926 <main+0x82>
 800096c:	58024400 	.word	0x58024400
 8000970:	58020400 	.word	0x58020400

08000974 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09c      	sub	sp, #112	; 0x70
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	224c      	movs	r2, #76	; 0x4c
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f005 fa50 	bl	8005e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2220      	movs	r2, #32
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f005 fa4a 	bl	8005e28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000994:	2004      	movs	r0, #4
 8000996:	f001 fd7f 	bl	8002498 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <_Z18SystemClock_Configv+0x110>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	4a38      	ldr	r2, [pc, #224]	; (8000a84 <_Z18SystemClock_Configv+0x110>)
 80009a4:	f023 0301 	bic.w	r3, r3, #1
 80009a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009aa:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <_Z18SystemClock_Configv+0x110>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <_Z18SystemClock_Configv+0x114>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009bc:	4a32      	ldr	r2, [pc, #200]	; (8000a88 <_Z18SystemClock_Configv+0x114>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b30      	ldr	r3, [pc, #192]	; (8000a88 <_Z18SystemClock_Configv+0x114>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d0:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <_Z18SystemClock_Configv+0x114>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009dc:	bf14      	ite	ne
 80009de:	2301      	movne	r3, #1
 80009e0:	2300      	moveq	r3, #0
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d000      	beq.n	80009ea <_Z18SystemClock_Configv+0x76>
 80009e8:	e7f2      	b.n	80009d0 <_Z18SystemClock_Configv+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ea:	2302      	movs	r3, #2
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	2302      	movs	r3, #2
 80009f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fa:	2300      	movs	r3, #0
 80009fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009fe:	2304      	movs	r3, #4
 8000a00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a02:	230a      	movs	r3, #10
 8000a04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a12:	230c      	movs	r3, #12
 8000a14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a16:	2302      	movs	r3, #2
 8000a18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fd92 	bl	800254c <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf14      	ite	ne
 8000a2e:	2301      	movne	r3, #1
 8000a30:	2300      	moveq	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000a38:	f000 f92a 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	233f      	movs	r3, #63	; 0x3f
 8000a3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2303      	movs	r3, #3
 8000a42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a4c:	2340      	movs	r3, #64	; 0x40
 8000a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a50:	2340      	movs	r3, #64	; 0x40
 8000a52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a5a:	2340      	movs	r3, #64	; 0x40
 8000a5c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 f9a0 	bl	8002da8 <HAL_RCC_ClockConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	bf14      	ite	ne
 8000a6e:	2301      	movne	r3, #1
 8000a70:	2300      	moveq	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8000a78:	f000 f90a 	bl	8000c90 <Error_Handler>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3770      	adds	r7, #112	; 0x70
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	58000400 	.word	0x58000400
 8000a88:	58024800 	.word	0x58024800

08000a8c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <_ZL12MX_I2C1_Initv+0x94>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000a98:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <_ZL12MX_I2C1_Initv+0x98>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac6:	4815      	ldr	r0, [pc, #84]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000ac8:	f000 ff2c 	bl	8001924 <HAL_I2C_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf14      	ite	ne
 8000ad2:	2301      	movne	r3, #1
 8000ad4:	2300      	moveq	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000adc:	f000 f8d8 	bl	8000c90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480e      	ldr	r0, [pc, #56]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000ae4:	f001 fc40 	bl	8002368 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000af8:	f000 f8ca 	bl	8000c90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <_ZL12MX_I2C1_Initv+0x90>)
 8000b00:	f001 fc7d 	bl	80023fe <HAL_I2CEx_ConfigDigitalFilter>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000b14:	f000 f8bc 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	24000094 	.word	0x24000094
 8000b20:	40005400 	.word	0x40005400
 8000b24:	00404c74 	.word	0x00404c74

08000b28 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b2e:	4a2d      	ldr	r2, [pc, #180]	; (8000be4 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b70:	481b      	ldr	r0, [pc, #108]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b72:	f004 f80d 	bl	8004b90 <HAL_UART_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bf14      	ite	ne
 8000b7c:	2301      	movne	r3, #1
 8000b7e:	2300      	moveq	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000b86:	f000 f883 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4814      	ldr	r0, [pc, #80]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b8e:	f005 f83b 	bl	8005c08 <HAL_UARTEx_SetTxFifoThreshold>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf14      	ite	ne
 8000b98:	2301      	movne	r3, #1
 8000b9a:	2300      	moveq	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000ba2:	f000 f875 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000baa:	f005 f86b 	bl	8005c84 <HAL_UARTEx_SetRxFifoThreshold>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf14      	ite	ne
 8000bb4:	2301      	movne	r3, #1
 8000bb6:	2300      	moveq	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000bbe:	f000 f867 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bc4:	f004 ffe7 	bl	8005b96 <HAL_UARTEx_DisableFifoMode>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2301      	movne	r3, #1
 8000bd0:	2300      	moveq	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000bd8:	f000 f85a 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	240000e0 	.word	0x240000e0
 8000be4:	40004800 	.word	0x40004800

08000be8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <_ZL12MX_GPIO_Initv+0xa4>)
 8000c5e:	f000 fdff 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c62:	2302      	movs	r3, #2
 8000c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <_ZL12MX_GPIO_Initv+0xa4>)
 8000c7a:	f000 fb37 	bl	80012ec <HAL_GPIO_Init>

}
 8000c7e:	bf00      	nop
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	58021000 	.word	0x58021000

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_MspInit+0x30>)
 8000ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca8:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x30>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x30>)
 8000cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	58024400 	.word	0x58024400

08000cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0b8      	sub	sp, #224	; 0xe0
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	22bc      	movs	r2, #188	; 0xbc
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f005 f899 	bl	8005e28 <memset>
  if(hi2c->Instance==I2C1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <HAL_I2C_MspInit+0xc0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d142      	bne.n	8000d86 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d00:	2308      	movs	r3, #8
 8000d02:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 fbd6 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d1a:	f7ff ffb9 	bl	8000c90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d26:	f043 0302 	orr.w	r3, r3, #2
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d44:	2312      	movs	r3, #18
 8000d46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d56:	2304      	movs	r3, #4
 8000d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d60:	4619      	mov	r1, r3
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <HAL_I2C_MspInit+0xc8>)
 8000d64:	f000 fac2 	bl	80012ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	37e0      	adds	r7, #224	; 0xe0
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40005400 	.word	0x40005400
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58020400 	.word	0x58020400

08000d9c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <HAL_I2C_MspDeInit+0x40>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d111      	bne.n	8000dd2 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_I2C_MspDeInit+0x44>)
 8000db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_I2C_MspDeInit+0x44>)
 8000db6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000dba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <HAL_I2C_MspDeInit+0x48>)
 8000dc4:	f000 fc42 	bl	800164c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_I2C_MspDeInit+0x48>)
 8000dce:	f000 fc3d 	bl	800164c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020400 	.word	0x58020400

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0b8      	sub	sp, #224	; 0xe0
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	22bc      	movs	r2, #188	; 0xbc
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f005 f80d 	bl	8005e28 <memset>
  if(huart->Instance==USART3)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <HAL_UART_MspInit+0xc0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d142      	bne.n	8000e9e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 fb4a 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e32:	f7ff ff2d 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_UART_MspInit+0xc4>)
 8000e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <HAL_UART_MspInit+0xc4>)
 8000e3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_UART_MspInit+0xc4>)
 8000e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_UART_MspInit+0xc4>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	4a14      	ldr	r2, [pc, #80]	; (8000eac <HAL_UART_MspInit+0xc4>)
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_UART_MspInit+0xc4>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <HAL_UART_MspInit+0xc8>)
 8000e9a:	f000 fa27 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	37e0      	adds	r7, #224	; 0xe0
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40004800 	.word	0x40004800
 8000eac:	58024400 	.word	0x58024400
 8000eb0:	58020c00 	.word	0x58020c00

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f8c0 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
	return 1;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_kill>:

int _kill(int pid, int sig)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f22:	f004 ff57 	bl	8005dd4 <__errno>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2216      	movs	r2, #22
 8000f2a:	601a      	str	r2, [r3, #0]
	return -1;
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_exit>:

void _exit (int status)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ffe7 	bl	8000f18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f4a:	e7fe      	b.n	8000f4a <_exit+0x12>

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f50:	f7ff fb44 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f004 ff31 	bl	8005de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fc91 	bl	80008a4 <main>
  bx  lr
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f8c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000f90:	08005f64 	.word	0x08005f64
  ldr r2, =_sbss
 8000f94:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000f98:	24000178 	.word	0x24000178

08000f9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC3_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 f96e 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fac:	f002 f8b2 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_Init+0x68>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	4913      	ldr	r1, [pc, #76]	; (800100c <HAL_Init+0x6c>)
 8000fbe:	5ccb      	ldrb	r3, [r1, r3]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_Init+0x68>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_Init+0x6c>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	f003 031f 	and.w	r3, r3, #31
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_Init+0x70>)
 8000fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_Init+0x74>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f814 	bl	8001018 <HAL_InitTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e002      	b.n	8001000 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffa:	f7ff fe4f 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	58024400 	.word	0x58024400
 800100c:	08005ee4 	.word	0x08005ee4
 8001010:	24000004 	.word	0x24000004
 8001014:	24000000 	.word	0x24000000

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_InitTick+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e021      	b.n	8001070 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_InitTick+0x64>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_InitTick+0x60>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f945 	bl	80012d2 <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 f91d 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_InitTick+0x68>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2400000c 	.word	0x2400000c
 800107c:	24000000 	.word	0x24000000
 8001080:	24000008 	.word	0x24000008

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2400000c 	.word	0x2400000c
 80010a8:	24000170 	.word	0x24000170

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	24000170 	.word	0x24000170

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2400000c 	.word	0x2400000c

0800110c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetREVID+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	0c1b      	lsrs	r3, r3, #16
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	5c001000 	.word	0x5c001000

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	4313      	orrs	r3, r2
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	05fa0000 	.word	0x05fa0000

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff47 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff5e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffb2 	bl	8001244 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012fa:	4b89      	ldr	r3, [pc, #548]	; (8001520 <HAL_GPIO_Init+0x234>)
 80012fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012fe:	e194      	b.n	800162a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8186 	beq.w	8001624 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d005      	beq.n	8001330 <HAL_GPIO_Init+0x44>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d130      	bne.n	8001392 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001366:	2201      	movs	r2, #1
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	f003 0201 	and.w	r2, r3, #1
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b03      	cmp	r3, #3
 800139c:	d017      	beq.n	80013ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d123      	bne.n	8001422 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	69b9      	ldr	r1, [r7, #24]
 800141e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0203 	and.w	r2, r3, #3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 80e0 	beq.w	8001624 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_GPIO_Init+0x238>)
 8001466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800146a:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <HAL_GPIO_Init+0x238>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <HAL_GPIO_Init+0x238>)
 8001476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001482:	4a29      	ldr	r2, [pc, #164]	; (8001528 <HAL_GPIO_Init+0x23c>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a20      	ldr	r2, [pc, #128]	; (800152c <HAL_GPIO_Init+0x240>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d052      	beq.n	8001554 <HAL_GPIO_Init+0x268>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_GPIO_Init+0x244>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_GPIO_Init+0x22e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <HAL_GPIO_Init+0x248>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d02b      	beq.n	8001516 <HAL_GPIO_Init+0x22a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <HAL_GPIO_Init+0x24c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x226>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_GPIO_Init+0x250>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x222>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <HAL_GPIO_Init+0x254>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x21e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x258>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x21a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x25c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x216>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <HAL_GPIO_Init+0x260>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x212>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_GPIO_Init+0x264>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x20e>
 80014f6:	2309      	movs	r3, #9
 80014f8:	e02d      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 80014fa:	230a      	movs	r3, #10
 80014fc:	e02b      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 80014fe:	2308      	movs	r3, #8
 8001500:	e029      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001502:	2307      	movs	r3, #7
 8001504:	e027      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001506:	2306      	movs	r3, #6
 8001508:	e025      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800150a:	2305      	movs	r3, #5
 800150c:	e023      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800150e:	2304      	movs	r3, #4
 8001510:	e021      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001512:	2303      	movs	r3, #3
 8001514:	e01f      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001516:	2302      	movs	r3, #2
 8001518:	e01d      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800151a:	2301      	movs	r3, #1
 800151c:	e01b      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800151e:	bf00      	nop
 8001520:	58000080 	.word	0x58000080
 8001524:	58024400 	.word	0x58024400
 8001528:	58000400 	.word	0x58000400
 800152c:	58020000 	.word	0x58020000
 8001530:	58020400 	.word	0x58020400
 8001534:	58020800 	.word	0x58020800
 8001538:	58020c00 	.word	0x58020c00
 800153c:	58021000 	.word	0x58021000
 8001540:	58021400 	.word	0x58021400
 8001544:	58021800 	.word	0x58021800
 8001548:	58021c00 	.word	0x58021c00
 800154c:	58022000 	.word	0x58022000
 8001550:	58022400 	.word	0x58022400
 8001554:	2300      	movs	r3, #0
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001566:	4938      	ldr	r1, [pc, #224]	; (8001648 <HAL_GPIO_Init+0x35c>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800159a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3301      	adds	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f ae63 	bne.w	8001300 <HAL_GPIO_Init+0x14>
  }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3724      	adds	r7, #36	; 0x24
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	58000400 	.word	0x58000400

0800164c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800165a:	4b75      	ldr	r3, [pc, #468]	; (8001830 <HAL_GPIO_DeInit+0x1e4>)
 800165c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800165e:	e0d9      	b.n	8001814 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001660:	2201      	movs	r2, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4013      	ands	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80cc 	beq.w	800180e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001676:	4a6f      	ldr	r2, [pc, #444]	; (8001834 <HAL_GPIO_DeInit+0x1e8>)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a67      	ldr	r2, [pc, #412]	; (8001838 <HAL_GPIO_DeInit+0x1ec>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d037      	beq.n	8001710 <HAL_GPIO_DeInit+0xc4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a66      	ldr	r2, [pc, #408]	; (800183c <HAL_GPIO_DeInit+0x1f0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d031      	beq.n	800170c <HAL_GPIO_DeInit+0xc0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a65      	ldr	r2, [pc, #404]	; (8001840 <HAL_GPIO_DeInit+0x1f4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d02b      	beq.n	8001708 <HAL_GPIO_DeInit+0xbc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a64      	ldr	r2, [pc, #400]	; (8001844 <HAL_GPIO_DeInit+0x1f8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d025      	beq.n	8001704 <HAL_GPIO_DeInit+0xb8>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a63      	ldr	r2, [pc, #396]	; (8001848 <HAL_GPIO_DeInit+0x1fc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d01f      	beq.n	8001700 <HAL_GPIO_DeInit+0xb4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a62      	ldr	r2, [pc, #392]	; (800184c <HAL_GPIO_DeInit+0x200>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d019      	beq.n	80016fc <HAL_GPIO_DeInit+0xb0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a61      	ldr	r2, [pc, #388]	; (8001850 <HAL_GPIO_DeInit+0x204>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d013      	beq.n	80016f8 <HAL_GPIO_DeInit+0xac>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a60      	ldr	r2, [pc, #384]	; (8001854 <HAL_GPIO_DeInit+0x208>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00d      	beq.n	80016f4 <HAL_GPIO_DeInit+0xa8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a5f      	ldr	r2, [pc, #380]	; (8001858 <HAL_GPIO_DeInit+0x20c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_DeInit+0xa4>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_GPIO_DeInit+0x210>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_GPIO_DeInit+0xa0>
 80016e8:	2309      	movs	r3, #9
 80016ea:	e012      	b.n	8001712 <HAL_GPIO_DeInit+0xc6>
 80016ec:	230a      	movs	r3, #10
 80016ee:	e010      	b.n	8001712 <HAL_GPIO_DeInit+0xc6>
 80016f0:	2308      	movs	r3, #8
 80016f2:	e00e      	b.n	8001712 <HAL_GPIO_DeInit+0xc6>
 80016f4:	2307      	movs	r3, #7
 80016f6:	e00c      	b.n	8001712 <HAL_GPIO_DeInit+0xc6>
 80016f8:	2306      	movs	r3, #6
 80016fa:	e00a      	b.n	8001712 <HAL_GPIO_DeInit+0xc6>
 80016fc:	2305      	movs	r3, #5
 80016fe:	e008      	b.n	8001712 <HAL_GPIO_DeInit+0xc6>
 8001700:	2304      	movs	r3, #4
 8001702:	e006      	b.n	8001712 <HAL_GPIO_DeInit+0xc6>
 8001704:	2303      	movs	r3, #3
 8001706:	e004      	b.n	8001712 <HAL_GPIO_DeInit+0xc6>
 8001708:	2302      	movs	r3, #2
 800170a:	e002      	b.n	8001712 <HAL_GPIO_DeInit+0xc6>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_GPIO_DeInit+0xc6>
 8001710:	2300      	movs	r3, #0
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	f002 0203 	and.w	r2, r2, #3
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	4093      	lsls	r3, r2
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	d136      	bne.n	8001790 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	401a      	ands	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800173e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800174c:	4013      	ands	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43db      	mvns	r3, r3
 800175a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800175e:	4013      	ands	r3, r2
 8001760:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	220f      	movs	r2, #15
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001772:	4a30      	ldr	r2, [pc, #192]	; (8001834 <HAL_GPIO_DeInit+0x1e8>)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	43da      	mvns	r2, r3
 8001782:	482c      	ldr	r0, [pc, #176]	; (8001834 <HAL_GPIO_DeInit+0x1e8>)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	400a      	ands	r2, r1
 800178a:	3302      	adds	r3, #2
 800178c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2103      	movs	r1, #3
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	08d2      	lsrs	r2, r2, #3
 80017c4:	4019      	ands	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2103      	movs	r1, #3
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	401a      	ands	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2103      	movs	r1, #3
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	401a      	ands	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f af1f 	bne.w	8001660 <HAL_GPIO_DeInit+0x14>
  }
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58000080 	.word	0x58000080
 8001834:	58000400 	.word	0x58000400
 8001838:	58020000 	.word	0x58020000
 800183c:	58020400 	.word	0x58020400
 8001840:	58020800 	.word	0x58020800
 8001844:	58020c00 	.word	0x58020c00
 8001848:	58021000 	.word	0x58021000
 800184c:	58021400 	.word	0x58021400
 8001850:	58021800 	.word	0x58021800
 8001854:	58021c00 	.word	0x58021c00
 8001858:	58022000 	.word	0x58022000
 800185c:	58022400 	.word	0x58022400

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018a4:	887a      	ldrh	r2, [r7, #2]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	041a      	lsls	r2, r3, #16
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	400b      	ands	r3, r1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80018d0:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_HSEM_FastTake+0x2c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3320      	adds	r3, #32
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_HSEM_FastTake+0x30>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e000      	b.n	80018e6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	58026400 	.word	0x58026400
 80018f8:	80000300 	.word	0x80000300

080018fc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001906:	4906      	ldr	r1, [pc, #24]	; (8001920 <HAL_HSEM_Release+0x24>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	58026400 	.word	0x58026400

08001924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff f9c0 	bl	8000cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2224      	movs	r2, #36	; 0x24
 8001954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001974:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001984:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d107      	bne.n	800199e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	e006      	b.n	80019ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d104      	bne.n	80019be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_I2C_Init+0x11c>)
 80019ca:	430b      	orrs	r3, r1
 80019cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69d9      	ldr	r1, [r3, #28]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	02008000 	.word	0x02008000

08001a44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e021      	b.n	8001a9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2224      	movs	r2, #36	; 0x24
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff f994 	bl	8000d9c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	817b      	strh	r3, [r7, #10]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	f040 80da 	bne.w	8001c7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_I2C_Master_Transmit+0x30>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e0d3      	b.n	8001c7c <HAL_I2C_Master_Transmit+0x1d8>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001adc:	f7ff fae6 	bl	80010ac <HAL_GetTick>
 8001ae0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2319      	movs	r3, #25
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f9e6 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0be      	b.n	8001c7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2221      	movs	r2, #33	; 0x21
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	893a      	ldrh	r2, [r7, #8]
 8001b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2bff      	cmp	r3, #255	; 0xff
 8001b2e:	d90e      	bls.n	8001b4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	22ff      	movs	r2, #255	; 0xff
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	8979      	ldrh	r1, [r7, #10]
 8001b3e:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fbdc 	bl	8002304 <I2C_TransferConfig>
 8001b4c:	e06c      	b.n	8001c28 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	8979      	ldrh	r1, [r7, #10]
 8001b60:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 fbcb 	bl	8002304 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b6e:	e05b      	b.n	8001c28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	6a39      	ldr	r1, [r7, #32]
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 f9e3 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e07b      	b.n	8001c7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d034      	beq.n	8001c28 <HAL_I2C_Master_Transmit+0x184>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d130      	bne.n	8001c28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f975 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e04d      	b.n	8001c7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2bff      	cmp	r3, #255	; 0xff
 8001be8:	d90e      	bls.n	8001c08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	22ff      	movs	r2, #255	; 0xff
 8001bee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	8979      	ldrh	r1, [r7, #10]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 fb7f 	bl	8002304 <I2C_TransferConfig>
 8001c06:	e00f      	b.n	8001c28 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	8979      	ldrh	r1, [r7, #10]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fb6e 	bl	8002304 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d19e      	bne.n	8001b70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	6a39      	ldr	r1, [r7, #32]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f9c2 	bl	8001fc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e01a      	b.n	8001c7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_I2C_Master_Transmit+0x1e4>)
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2220      	movs	r2, #32
 8001c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
  }
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	80002000 	.word	0x80002000
 8001c88:	fe00e800 	.word	0xfe00e800

08001c8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	461a      	mov	r2, r3
 8001c98:	460b      	mov	r3, r1
 8001c9a:	817b      	strh	r3, [r7, #10]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	f040 80db 	bne.w	8001e64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_I2C_Master_Receive+0x30>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e0d4      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cc4:	f7ff f9f2 	bl	80010ac <HAL_GetTick>
 8001cc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2319      	movs	r3, #25
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f8f2 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0bf      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2222      	movs	r2, #34	; 0x22
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	893a      	ldrh	r2, [r7, #8]
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2bff      	cmp	r3, #255	; 0xff
 8001d16:	d90e      	bls.n	8001d36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	22ff      	movs	r2, #255	; 0xff
 8001d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	8979      	ldrh	r1, [r7, #10]
 8001d26:	4b52      	ldr	r3, [pc, #328]	; (8001e70 <HAL_I2C_Master_Receive+0x1e4>)
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fae8 	bl	8002304 <I2C_TransferConfig>
 8001d34:	e06d      	b.n	8001e12 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	8979      	ldrh	r1, [r7, #10]
 8001d48:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <HAL_I2C_Master_Receive+0x1e4>)
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fad7 	bl	8002304 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d56:	e05c      	b.n	8001e12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	6a39      	ldr	r1, [r7, #32]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f96b 	bl	8002038 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e07c      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d034      	beq.n	8001e12 <HAL_I2C_Master_Receive+0x186>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d130      	bne.n	8001e12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	2200      	movs	r2, #0
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f880 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e04d      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2bff      	cmp	r3, #255	; 0xff
 8001dd2:	d90e      	bls.n	8001df2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	22ff      	movs	r2, #255	; 0xff
 8001dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	8979      	ldrh	r1, [r7, #10]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fa8a 	bl	8002304 <I2C_TransferConfig>
 8001df0:	e00f      	b.n	8001e12 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	8979      	ldrh	r1, [r7, #10]
 8001e04:	2300      	movs	r3, #0
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fa79 	bl	8002304 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d19d      	bne.n	8001d58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	6a39      	ldr	r1, [r7, #32]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f8cd 	bl	8001fc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e01a      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2220      	movs	r2, #32
 8001e36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_I2C_Master_Receive+0x1e8>)
 8001e44:	400b      	ands	r3, r1
 8001e46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	80002400 	.word	0x80002400
 8001e74:	fe00e800 	.word	0xfe00e800

08001e78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d103      	bne.n	8001e96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d007      	beq.n	8001eb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	619a      	str	r2, [r3, #24]
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed0:	e022      	b.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d01e      	beq.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eda:	f7ff f8e7 	bl	80010ac <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d302      	bcc.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d113      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e00f      	b.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4013      	ands	r3, r2
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d0cd      	beq.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f4c:	e02c      	b.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f8ea 	bl	800212c <I2C_IsErrorOccurred>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e02a      	b.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d01e      	beq.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6a:	f7ff f89f 	bl	80010ac <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d302      	bcc.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d113      	bne.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e007      	b.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d1cb      	bne.n	8001f4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fcc:	e028      	b.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f8aa 	bl	800212c <I2C_IsErrorOccurred>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e026      	b.n	8002030 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7ff f863 	bl	80010ac <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d113      	bne.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e007      	b.n	8002030 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b20      	cmp	r3, #32
 800202c:	d1cf      	bne.n	8001fce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002044:	e064      	b.n	8002110 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f86e 	bl	800212c <I2C_IsErrorOccurred>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e062      	b.n	8002120 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b20      	cmp	r3, #32
 8002066:	d138      	bne.n	80020da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b04      	cmp	r3, #4
 8002074:	d105      	bne.n	8002082 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e04e      	b.n	8002120 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b10      	cmp	r3, #16
 800208e:	d107      	bne.n	80020a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2210      	movs	r2, #16
 8002096:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2204      	movs	r2, #4
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
 800209e:	e002      	b.n	80020a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2220      	movs	r2, #32
 80020ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80020ba:	400b      	ands	r3, r1
 80020bc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e022      	b.n	8002120 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7fe ffe7 	bl	80010ac <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10f      	bne.n	8002110 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f043 0220 	orr.w	r2, r3, #32
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e007      	b.n	8002120 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b04      	cmp	r3, #4
 800211c:	d193      	bne.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	fe00e800 	.word	0xfe00e800

0800212c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d075      	beq.n	8002244 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2210      	movs	r2, #16
 800215e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002160:	e056      	b.n	8002210 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d052      	beq.n	8002210 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800216a:	f7fe ff9f 	bl	80010ac <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	429a      	cmp	r2, r3
 8002178:	d302      	bcc.n	8002180 <I2C_IsErrorOccurred+0x54>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d147      	bne.n	8002210 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002192:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800219e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a2:	d12e      	bne.n	8002202 <I2C_IsErrorOccurred+0xd6>
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021aa:	d02a      	beq.n	8002202 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d027      	beq.n	8002202 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021c2:	f7fe ff73 	bl	80010ac <HAL_GetTick>
 80021c6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c8:	e01b      	b.n	8002202 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021ca:	f7fe ff6f 	bl	80010ac <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b19      	cmp	r3, #25
 80021d6:	d914      	bls.n	8002202 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b20      	cmp	r3, #32
 800220e:	d1dc      	bne.n	80021ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b20      	cmp	r3, #32
 800221c:	d003      	beq.n	8002226 <I2C_IsErrorOccurred+0xfa>
 800221e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002222:	2b00      	cmp	r3, #0
 8002224:	d09d      	beq.n	8002162 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2220      	movs	r2, #32
 8002234:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002266:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f043 0308 	orr.w	r3, r3, #8
 800227e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002288:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80022b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d01c      	beq.n	80022f4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff fddc 	bl	8001e78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <I2C_IsErrorOccurred+0x1d4>)
 80022cc:	400b      	ands	r3, r1
 80022ce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80022f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3728      	adds	r7, #40	; 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	fe00e800 	.word	0xfe00e800

08002304 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	817b      	strh	r3, [r7, #10]
 8002312:	4613      	mov	r3, r2
 8002314:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002316:	897b      	ldrh	r3, [r7, #10]
 8002318:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800231c:	7a7b      	ldrb	r3, [r7, #9]
 800231e:	041b      	lsls	r3, r3, #16
 8002320:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002324:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	4313      	orrs	r3, r2
 800232e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002332:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	0d5b      	lsrs	r3, r3, #21
 800233e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <I2C_TransferConfig+0x60>)
 8002344:	430b      	orrs	r3, r1
 8002346:	43db      	mvns	r3, r3
 8002348:	ea02 0103 	and.w	r1, r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002356:	bf00      	nop
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	03ff63ff 	.word	0x03ff63ff

08002368 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b20      	cmp	r3, #32
 800237c:	d138      	bne.n	80023f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002388:	2302      	movs	r3, #2
 800238a:	e032      	b.n	80023f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e000      	b.n	80023f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023f0:	2302      	movs	r3, #2
  }
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b20      	cmp	r3, #32
 8002412:	d139      	bne.n	8002488 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800241e:	2302      	movs	r3, #2
 8002420:	e033      	b.n	800248a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2224      	movs	r2, #36	; 0x24
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002450:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	e000      	b.n	800248a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002488:	2302      	movs	r3, #2
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80024a0:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_PWREx_ConfigSupply+0xb0>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	2b06      	cmp	r3, #6
 80024aa:	d00a      	beq.n	80024c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024ac:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_PWREx_ConfigSupply+0xb0>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e040      	b.n	8002540 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e03e      	b.n	8002540 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_PWREx_ConfigSupply+0xb0>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80024ca:	491f      	ldr	r1, [pc, #124]	; (8002548 <HAL_PWREx_ConfigSupply+0xb0>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024d2:	f7fe fdeb 	bl	80010ac <HAL_GetTick>
 80024d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024d8:	e009      	b.n	80024ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024da:	f7fe fde7 	bl	80010ac <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e8:	d901      	bls.n	80024ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e028      	b.n	8002540 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_PWREx_ConfigSupply+0xb0>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fa:	d1ee      	bne.n	80024da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b1e      	cmp	r3, #30
 8002500:	d008      	beq.n	8002514 <HAL_PWREx_ConfigSupply+0x7c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b2e      	cmp	r3, #46	; 0x2e
 8002506:	d005      	beq.n	8002514 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b1d      	cmp	r3, #29
 800250c:	d002      	beq.n	8002514 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b2d      	cmp	r3, #45	; 0x2d
 8002512:	d114      	bne.n	800253e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002514:	f7fe fdca 	bl	80010ac <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800251a:	e009      	b.n	8002530 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800251c:	f7fe fdc6 	bl	80010ac <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800252a:	d901      	bls.n	8002530 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e007      	b.n	8002540 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_PWREx_ConfigSupply+0xb0>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253c:	d1ee      	bne.n	800251c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	58024800 	.word	0x58024800

0800254c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	; 0x30
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	f000 bc1d 	b.w	8002d9a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8087 	beq.w	800267c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256e:	4b99      	ldr	r3, [pc, #612]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002578:	4b96      	ldr	r3, [pc, #600]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	2b10      	cmp	r3, #16
 8002582:	d007      	beq.n	8002594 <HAL_RCC_OscConfig+0x48>
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	2b18      	cmp	r3, #24
 8002588:	d110      	bne.n	80025ac <HAL_RCC_OscConfig+0x60>
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d10b      	bne.n	80025ac <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	4b8f      	ldr	r3, [pc, #572]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d06c      	beq.n	800267a <HAL_RCC_OscConfig+0x12e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d168      	bne.n	800267a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e3f6      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b4:	d106      	bne.n	80025c4 <HAL_RCC_OscConfig+0x78>
 80025b6:	4b87      	ldr	r3, [pc, #540]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a86      	ldr	r2, [pc, #536]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e02e      	b.n	8002622 <HAL_RCC_OscConfig+0xd6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10c      	bne.n	80025e6 <HAL_RCC_OscConfig+0x9a>
 80025cc:	4b81      	ldr	r3, [pc, #516]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a80      	ldr	r2, [pc, #512]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b7e      	ldr	r3, [pc, #504]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a7d      	ldr	r2, [pc, #500]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80025de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	e01d      	b.n	8002622 <HAL_RCC_OscConfig+0xd6>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ee:	d10c      	bne.n	800260a <HAL_RCC_OscConfig+0xbe>
 80025f0:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80025f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a74      	ldr	r2, [pc, #464]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e00b      	b.n	8002622 <HAL_RCC_OscConfig+0xd6>
 800260a:	4b72      	ldr	r3, [pc, #456]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a71      	ldr	r2, [pc, #452]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b6f      	ldr	r3, [pc, #444]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6e      	ldr	r2, [pc, #440]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 800261c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002620:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d013      	beq.n	8002652 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe fd3f 	bl	80010ac <HAL_GetTick>
 800262e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002632:	f7fe fd3b 	bl	80010ac <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e3aa      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002644:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0xe6>
 8002650:	e014      	b.n	800267c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe fd2b 	bl	80010ac <HAL_GetTick>
 8002656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265a:	f7fe fd27 	bl	80010ac <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b64      	cmp	r3, #100	; 0x64
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e396      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800266c:	4b59      	ldr	r3, [pc, #356]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x10e>
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80cb 	beq.w	8002820 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268a:	4b52      	ldr	r3, [pc, #328]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002692:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002694:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_RCC_OscConfig+0x164>
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	2b18      	cmp	r3, #24
 80026a4:	d156      	bne.n	8002754 <HAL_RCC_OscConfig+0x208>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d151      	bne.n	8002754 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b0:	4b48      	ldr	r3, [pc, #288]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x17c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e368      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026c8:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 0219 	bic.w	r2, r3, #25
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	493f      	ldr	r1, [pc, #252]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026da:	f7fe fce7 	bl	80010ac <HAL_GetTick>
 80026de:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe fce3 	bl	80010ac <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e352      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f4:	4b37      	ldr	r3, [pc, #220]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	f7fe fd04 	bl	800110c <HAL_GetREVID>
 8002704:	4603      	mov	r3, r0
 8002706:	f241 0203 	movw	r2, #4099	; 0x1003
 800270a:	4293      	cmp	r3, r2
 800270c:	d817      	bhi.n	800273e <HAL_RCC_OscConfig+0x1f2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b40      	cmp	r3, #64	; 0x40
 8002714:	d108      	bne.n	8002728 <HAL_RCC_OscConfig+0x1dc>
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800271e:	4a2d      	ldr	r2, [pc, #180]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002726:	e07b      	b.n	8002820 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	031b      	lsls	r3, r3, #12
 8002736:	4927      	ldr	r1, [pc, #156]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273c:	e070      	b.n	8002820 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	061b      	lsls	r3, r3, #24
 800274c:	4921      	ldr	r1, [pc, #132]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002752:	e065      	b.n	8002820 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d048      	beq.n	80027ee <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 0219 	bic.w	r2, r3, #25
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	491a      	ldr	r1, [pc, #104]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe fc9d 	bl	80010ac <HAL_GetTick>
 8002772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe fc99 	bl	80010ac <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e308      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	f7fe fcba 	bl	800110c <HAL_GetREVID>
 8002798:	4603      	mov	r3, r0
 800279a:	f241 0203 	movw	r2, #4099	; 0x1003
 800279e:	4293      	cmp	r3, r2
 80027a0:	d81a      	bhi.n	80027d8 <HAL_RCC_OscConfig+0x28c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b40      	cmp	r3, #64	; 0x40
 80027a8:	d108      	bne.n	80027bc <HAL_RCC_OscConfig+0x270>
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027b2:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b8:	6053      	str	r3, [r2, #4]
 80027ba:	e031      	b.n	8002820 <HAL_RCC_OscConfig+0x2d4>
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	031b      	lsls	r3, r3, #12
 80027ca:	4902      	ldr	r1, [pc, #8]	; (80027d4 <HAL_RCC_OscConfig+0x288>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
 80027d0:	e026      	b.n	8002820 <HAL_RCC_OscConfig+0x2d4>
 80027d2:	bf00      	nop
 80027d4:	58024400 	.word	0x58024400
 80027d8:	4b9a      	ldr	r3, [pc, #616]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	4997      	ldr	r1, [pc, #604]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
 80027ec:	e018      	b.n	8002820 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b95      	ldr	r3, [pc, #596]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a94      	ldr	r2, [pc, #592]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe fc57 	bl	80010ac <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe fc53 	bl	80010ac <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e2c2      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002814:	4b8b      	ldr	r3, [pc, #556]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f0      	bne.n	8002802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a9 	beq.w	8002980 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282e:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002836:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002838:	4b82      	ldr	r3, [pc, #520]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d007      	beq.n	8002854 <HAL_RCC_OscConfig+0x308>
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b18      	cmp	r3, #24
 8002848:	d13a      	bne.n	80028c0 <HAL_RCC_OscConfig+0x374>
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d135      	bne.n	80028c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002854:	4b7b      	ldr	r3, [pc, #492]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_OscConfig+0x320>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d001      	beq.n	800286c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e296      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800286c:	f7fe fc4e 	bl	800110c <HAL_GetREVID>
 8002870:	4603      	mov	r3, r0
 8002872:	f241 0203 	movw	r2, #4099	; 0x1003
 8002876:	4293      	cmp	r3, r2
 8002878:	d817      	bhi.n	80028aa <HAL_RCC_OscConfig+0x35e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	2b20      	cmp	r3, #32
 8002880:	d108      	bne.n	8002894 <HAL_RCC_OscConfig+0x348>
 8002882:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800288a:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 800288c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002890:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002892:	e075      	b.n	8002980 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002894:	4b6b      	ldr	r3, [pc, #428]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	069b      	lsls	r3, r3, #26
 80028a2:	4968      	ldr	r1, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028a8:	e06a      	b.n	8002980 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028aa:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	061b      	lsls	r3, r3, #24
 80028b8:	4962      	ldr	r1, [pc, #392]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028be:	e05f      	b.n	8002980 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d042      	beq.n	800294e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028c8:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a5d      	ldr	r2, [pc, #372]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80028ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fbea 	bl	80010ac <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028dc:	f7fe fbe6 	bl	80010ac <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e255      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ee:	4b55      	ldr	r3, [pc, #340]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028fa:	f7fe fc07 	bl	800110c <HAL_GetREVID>
 80028fe:	4603      	mov	r3, r0
 8002900:	f241 0203 	movw	r2, #4099	; 0x1003
 8002904:	4293      	cmp	r3, r2
 8002906:	d817      	bhi.n	8002938 <HAL_RCC_OscConfig+0x3ec>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	2b20      	cmp	r3, #32
 800290e:	d108      	bne.n	8002922 <HAL_RCC_OscConfig+0x3d6>
 8002910:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002918:	4a4a      	ldr	r2, [pc, #296]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 800291a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800291e:	6053      	str	r3, [r2, #4]
 8002920:	e02e      	b.n	8002980 <HAL_RCC_OscConfig+0x434>
 8002922:	4b48      	ldr	r3, [pc, #288]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	069b      	lsls	r3, r3, #26
 8002930:	4944      	ldr	r1, [pc, #272]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
 8002936:	e023      	b.n	8002980 <HAL_RCC_OscConfig+0x434>
 8002938:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	493f      	ldr	r1, [pc, #252]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002948:	4313      	orrs	r3, r2
 800294a:	60cb      	str	r3, [r1, #12]
 800294c:	e018      	b.n	8002980 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a3c      	ldr	r2, [pc, #240]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7fe fba7 	bl	80010ac <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002962:	f7fe fba3 	bl	80010ac <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e212      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002974:	4b33      	ldr	r3, [pc, #204]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d036      	beq.n	80029fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d019      	beq.n	80029c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	4a2a      	ldr	r2, [pc, #168]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe fb84 	bl	80010ac <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe fb80 	bl	80010ac <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e1ef      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ba:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x45c>
 80029c6:	e018      	b.n	80029fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fb6a 	bl	80010ac <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe fb66 	bl	80010ac <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1d5      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d039      	beq.n	8002a7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002a14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fb47 	bl	80010ac <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a22:	f7fe fb43 	bl	80010ac <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1b2      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_RCC_OscConfig+0x4f8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x4d6>
 8002a40:	e01b      	b.n	8002a7a <HAL_RCC_OscConfig+0x52e>
 8002a42:	bf00      	nop
 8002a44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a48:	4b9b      	ldr	r3, [pc, #620]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a9a      	ldr	r2, [pc, #616]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a54:	f7fe fb2a 	bl	80010ac <HAL_GetTick>
 8002a58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a5c:	f7fe fb26 	bl	80010ac <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e195      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a6e:	4b92      	ldr	r3, [pc, #584]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8081 	beq.w	8002b8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a88:	4b8c      	ldr	r3, [pc, #560]	; (8002cbc <HAL_RCC_OscConfig+0x770>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a8b      	ldr	r2, [pc, #556]	; (8002cbc <HAL_RCC_OscConfig+0x770>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a94:	f7fe fb0a 	bl	80010ac <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a9c:	f7fe fb06 	bl	80010ac <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e175      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aae:	4b83      	ldr	r3, [pc, #524]	; (8002cbc <HAL_RCC_OscConfig+0x770>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x584>
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	4a7c      	ldr	r2, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ace:	e02d      	b.n	8002b2c <HAL_RCC_OscConfig+0x5e0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x5a6>
 8002ad8:	4b77      	ldr	r3, [pc, #476]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a76      	ldr	r2, [pc, #472]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	4b74      	ldr	r3, [pc, #464]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a73      	ldr	r2, [pc, #460]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002aea:	f023 0304 	bic.w	r3, r3, #4
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0x5e0>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5c8>
 8002afa:	4b6f      	ldr	r3, [pc, #444]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a6e      	ldr	r2, [pc, #440]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
 8002b06:	4b6c      	ldr	r3, [pc, #432]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a6b      	ldr	r2, [pc, #428]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0x5e0>
 8002b14:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a67      	ldr	r2, [pc, #412]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b20:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a64      	ldr	r2, [pc, #400]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002b26:	f023 0304 	bic.w	r3, r3, #4
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe faba 	bl	80010ac <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fab6 	bl	80010ac <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e123      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b52:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ee      	beq.n	8002b3c <HAL_RCC_OscConfig+0x5f0>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe faa4 	bl	80010ac <HAL_GetTick>
 8002b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe faa0 	bl	80010ac <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e10d      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ee      	bne.n	8002b68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8102 	beq.w	8002d98 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b94:	4b48      	ldr	r3, [pc, #288]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9c:	2b18      	cmp	r3, #24
 8002b9e:	f000 80bd 	beq.w	8002d1c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	f040 809e 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b42      	ldr	r3, [pc, #264]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a41      	ldr	r2, [pc, #260]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fa78 	bl	80010ac <HAL_GetTick>
 8002bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fa74 	bl	80010ac <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0e3      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bd2:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bde:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be2:	4b37      	ldr	r3, [pc, #220]	; (8002cc0 <HAL_RCC_OscConfig+0x774>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	4931      	ldr	r1, [pc, #196]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	628b      	str	r3, [r1, #40]	; 0x28
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c06:	3b01      	subs	r3, #1
 8002c08:	025b      	lsls	r3, r3, #9
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	3b01      	subs	r3, #1
 8002c14:	041b      	lsls	r3, r3, #16
 8002c16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	3b01      	subs	r3, #1
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c28:	4923      	ldr	r1, [pc, #140]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <HAL_RCC_OscConfig+0x778>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c46:	00d2      	lsls	r2, r2, #3
 8002c48:	491b      	ldr	r1, [pc, #108]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	f023 020c 	bic.w	r2, r3, #12
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4917      	ldr	r1, [pc, #92]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f023 0202 	bic.w	r2, r3, #2
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	4912      	ldr	r1, [pc, #72]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	4a10      	ldr	r2, [pc, #64]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe f9fd 	bl	80010ac <HAL_GetTick>
 8002cb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cb4:	e011      	b.n	8002cda <HAL_RCC_OscConfig+0x78e>
 8002cb6:	bf00      	nop
 8002cb8:	58024400 	.word	0x58024400
 8002cbc:	58024800 	.word	0x58024800
 8002cc0:	fffffc0c 	.word	0xfffffc0c
 8002cc4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe f9f0 	bl	80010ac <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e05f      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cda:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <HAL_RCC_OscConfig+0x858>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x77c>
 8002ce6:	e057      	b.n	8002d98 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <HAL_RCC_OscConfig+0x858>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2d      	ldr	r2, [pc, #180]	; (8002da4 <HAL_RCC_OscConfig+0x858>)
 8002cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f9da 	bl	80010ac <HAL_GetTick>
 8002cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe f9d6 	bl	80010ac <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e045      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_RCC_OscConfig+0x858>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x7b0>
 8002d1a:	e03d      	b.n	8002d98 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d1c:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_RCC_OscConfig+0x858>)
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_RCC_OscConfig+0x858>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d031      	beq.n	8002d94 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f003 0203 	and.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d12a      	bne.n	8002d94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d122      	bne.n	8002d94 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d11a      	bne.n	8002d94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	0a5b      	lsrs	r3, r3, #9
 8002d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d111      	bne.n	8002d94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d108      	bne.n	8002d94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	0e1b      	lsrs	r3, r3, #24
 8002d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3730      	adds	r7, #48	; 0x30
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	58024400 	.word	0x58024400

08002da8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e19c      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b8a      	ldr	r3, [pc, #552]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d910      	bls.n	8002dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b87      	ldr	r3, [pc, #540]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 020f 	bic.w	r2, r3, #15
 8002dd2:	4985      	ldr	r1, [pc, #532]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b83      	ldr	r3, [pc, #524]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e184      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	4b7b      	ldr	r3, [pc, #492]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d908      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e08:	4b78      	ldr	r3, [pc, #480]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4975      	ldr	r1, [pc, #468]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d010      	beq.n	8002e48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	4b70      	ldr	r3, [pc, #448]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d908      	bls.n	8002e48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e36:	4b6d      	ldr	r3, [pc, #436]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	496a      	ldr	r1, [pc, #424]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	4b64      	ldr	r3, [pc, #400]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d908      	bls.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e64:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	495e      	ldr	r1, [pc, #376]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69da      	ldr	r2, [r3, #28]
 8002e86:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d908      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e92:	4b56      	ldr	r3, [pc, #344]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4953      	ldr	r1, [pc, #332]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d908      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f023 020f 	bic.w	r2, r3, #15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4947      	ldr	r1, [pc, #284]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d055      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ede:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4940      	ldr	r1, [pc, #256]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef8:	4b3c      	ldr	r3, [pc, #240]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d121      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0f6      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d115      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0ea      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f28:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0de      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0d6      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f48:	4b28      	ldr	r3, [pc, #160]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f023 0207 	bic.w	r2, r3, #7
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4925      	ldr	r1, [pc, #148]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7fe f8a7 	bl	80010ac <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f62:	f7fe f8a3 	bl	80010ac <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0be      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f78:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d1eb      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d208      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f023 020f 	bic.w	r2, r3, #15
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d214      	bcs.n	8002ff0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 020f 	bic.w	r2, r3, #15
 8002fce:	4906      	ldr	r1, [pc, #24]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e086      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
 8002fe8:	52002000 	.word	0x52002000
 8002fec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003008:	429a      	cmp	r2, r3
 800300a:	d208      	bcs.n	800301e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800300c:	4b3c      	ldr	r3, [pc, #240]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	4939      	ldr	r1, [pc, #228]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800301a:	4313      	orrs	r3, r2
 800301c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d010      	beq.n	800304c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	4b34      	ldr	r3, [pc, #208]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003036:	429a      	cmp	r2, r3
 8003038:	d208      	bcs.n	800304c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	492e      	ldr	r1, [pc, #184]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003048:	4313      	orrs	r3, r2
 800304a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	4b28      	ldr	r3, [pc, #160]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003064:	429a      	cmp	r2, r3
 8003066:	d208      	bcs.n	800307a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	4922      	ldr	r1, [pc, #136]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003076:	4313      	orrs	r3, r2
 8003078:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003092:	429a      	cmp	r2, r3
 8003094:	d208      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4917      	ldr	r1, [pc, #92]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030a8:	f000 f834 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	4912      	ldr	r1, [pc, #72]	; (8003104 <HAL_RCC_ClockConfig+0x35c>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
 80030c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <HAL_RCC_ClockConfig+0x35c>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
 80030dc:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x360>)
 80030de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030e0:	4a0a      	ldr	r2, [pc, #40]	; (800310c <HAL_RCC_ClockConfig+0x364>)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCC_ClockConfig+0x368>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd ff94 	bl	8001018 <HAL_InitTick>
 80030f0:	4603      	mov	r3, r0
 80030f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	58024400 	.word	0x58024400
 8003104:	08005ee4 	.word	0x08005ee4
 8003108:	24000004 	.word	0x24000004
 800310c:	24000000 	.word	0x24000000
 8003110:	24000008 	.word	0x24000008

08003114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800311a:	4bb3      	ldr	r3, [pc, #716]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003122:	2b18      	cmp	r3, #24
 8003124:	f200 8155 	bhi.w	80033d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003128:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <HAL_RCC_GetSysClockFreq+0x1c>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003195 	.word	0x08003195
 8003134:	080033d3 	.word	0x080033d3
 8003138:	080033d3 	.word	0x080033d3
 800313c:	080033d3 	.word	0x080033d3
 8003140:	080033d3 	.word	0x080033d3
 8003144:	080033d3 	.word	0x080033d3
 8003148:	080033d3 	.word	0x080033d3
 800314c:	080033d3 	.word	0x080033d3
 8003150:	080031bb 	.word	0x080031bb
 8003154:	080033d3 	.word	0x080033d3
 8003158:	080033d3 	.word	0x080033d3
 800315c:	080033d3 	.word	0x080033d3
 8003160:	080033d3 	.word	0x080033d3
 8003164:	080033d3 	.word	0x080033d3
 8003168:	080033d3 	.word	0x080033d3
 800316c:	080033d3 	.word	0x080033d3
 8003170:	080031c1 	.word	0x080031c1
 8003174:	080033d3 	.word	0x080033d3
 8003178:	080033d3 	.word	0x080033d3
 800317c:	080033d3 	.word	0x080033d3
 8003180:	080033d3 	.word	0x080033d3
 8003184:	080033d3 	.word	0x080033d3
 8003188:	080033d3 	.word	0x080033d3
 800318c:	080033d3 	.word	0x080033d3
 8003190:	080031c7 	.word	0x080031c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003194:	4b94      	ldr	r3, [pc, #592]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031a0:	4b91      	ldr	r3, [pc, #580]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	4a90      	ldr	r2, [pc, #576]	; (80033ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80031b2:	e111      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031b4:	4b8d      	ldr	r3, [pc, #564]	; (80033ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031b6:	61bb      	str	r3, [r7, #24]
    break;
 80031b8:	e10e      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031ba:	4b8d      	ldr	r3, [pc, #564]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031bc:	61bb      	str	r3, [r7, #24]
    break;
 80031be:	e10b      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80031c0:	4b8c      	ldr	r3, [pc, #560]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031c2:	61bb      	str	r3, [r7, #24]
    break;
 80031c4:	e108      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031c6:	4b88      	ldr	r3, [pc, #544]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031d0:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031dc:	4b82      	ldr	r3, [pc, #520]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031e6:	4b80      	ldr	r3, [pc, #512]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	08db      	lsrs	r3, r3, #3
 80031ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80e1 	beq.w	80033cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b02      	cmp	r3, #2
 800320e:	f000 8083 	beq.w	8003318 <HAL_RCC_GetSysClockFreq+0x204>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b02      	cmp	r3, #2
 8003216:	f200 80a1 	bhi.w	800335c <HAL_RCC_GetSysClockFreq+0x248>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x114>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d056      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003226:	e099      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003228:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02d      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003234:	4b6c      	ldr	r3, [pc, #432]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	4a6b      	ldr	r2, [pc, #428]	; (80033ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325e:	4b62      	ldr	r3, [pc, #392]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003272:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800328e:	e087      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800329e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a2:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032d2:	e065      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003400 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003316:	e043      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003404 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800335a:	e021      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003400 <HAL_RCC_GetSysClockFreq+0x2ec>
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003382:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800339e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	0a5b      	lsrs	r3, r3, #9
 80033a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033aa:	3301      	adds	r3, #1
 80033ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80033bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c4:	ee17 3a90 	vmov	r3, s15
 80033c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80033ca:	e005      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
    break;
 80033d0:	e002      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033d4:	61bb      	str	r3, [r7, #24]
    break;
 80033d6:	bf00      	nop
  }

  return sysclockfreq;
 80033d8:	69bb      	ldr	r3, [r7, #24]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	58024400 	.word	0x58024400
 80033ec:	03d09000 	.word	0x03d09000
 80033f0:	003d0900 	.word	0x003d0900
 80033f4:	007a1200 	.word	0x007a1200
 80033f8:	46000000 	.word	0x46000000
 80033fc:	4c742400 	.word	0x4c742400
 8003400:	4a742400 	.word	0x4a742400
 8003404:	4af42400 	.word	0x4af42400

08003408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800340e:	f7ff fe81 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCC_GetHCLKFreq+0x50>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490f      	ldr	r1, [pc, #60]	; (800345c <HAL_RCC_GetHCLKFreq+0x54>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_RCC_GetHCLKFreq+0x50>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <HAL_RCC_GetHCLKFreq+0x54>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	fa22 f303 	lsr.w	r3, r2, r3
 8003442:	4a07      	ldr	r2, [pc, #28]	; (8003460 <HAL_RCC_GetHCLKFreq+0x58>)
 8003444:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003446:	4a07      	ldr	r2, [pc, #28]	; (8003464 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <HAL_RCC_GetHCLKFreq+0x58>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	58024400 	.word	0x58024400
 800345c:	08005ee4 	.word	0x08005ee4
 8003460:	24000004 	.word	0x24000004
 8003464:	24000000 	.word	0x24000000

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800346c:	f7ff ffcc 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4904      	ldr	r1, [pc, #16]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	58024400 	.word	0x58024400
 8003490:	08005ee4 	.word	0x08005ee4

08003494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003498:	f7ff ffb6 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4904      	ldr	r1, [pc, #16]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	58024400 	.word	0x58024400
 80034bc:	08005ee4 	.word	0x08005ee4

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c8:	2300      	movs	r3, #0
 80034ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034cc:	2300      	movs	r3, #0
 80034ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d03f      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034e4:	d02a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ea:	d824      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034f0:	d018      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034f6:	d81e      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003500:	d007      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003502:	e018      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003504:	4ba3      	ldr	r3, [pc, #652]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	4aa2      	ldr	r2, [pc, #648]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800350a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003510:	e015      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3304      	adds	r3, #4
 8003516:	2102      	movs	r1, #2
 8003518:	4618      	mov	r0, r3
 800351a:	f001 f9d5 	bl	80048c8 <RCCEx_PLL2_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003522:	e00c      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3324      	adds	r3, #36	; 0x24
 8003528:	2102      	movs	r1, #2
 800352a:	4618      	mov	r0, r3
 800352c:	f001 fa7e 	bl	8004a2c <RCCEx_PLL3_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003534:	e003      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
      break;
 800353a:	e000      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800353c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003544:	4b93      	ldr	r3, [pc, #588]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003550:	4990      	ldr	r1, [pc, #576]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	650b      	str	r3, [r1, #80]	; 0x50
 8003556:	e001      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d03d      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356c:	2b04      	cmp	r3, #4
 800356e:	d826      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003570:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003576:	bf00      	nop
 8003578:	0800358d 	.word	0x0800358d
 800357c:	0800359b 	.word	0x0800359b
 8003580:	080035ad 	.word	0x080035ad
 8003584:	080035c5 	.word	0x080035c5
 8003588:	080035c5 	.word	0x080035c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358c:	4b81      	ldr	r3, [pc, #516]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	4a80      	ldr	r2, [pc, #512]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003596:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003598:	e015      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 f991 	bl	80048c8 <RCCEx_PLL2_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035aa:	e00c      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3324      	adds	r3, #36	; 0x24
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fa3a 	bl	8004a2c <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035bc:	e003      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
      break;
 80035c2:	e000      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035cc:	4b71      	ldr	r3, [pc, #452]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	f023 0207 	bic.w	r2, r3, #7
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	496e      	ldr	r1, [pc, #440]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	650b      	str	r3, [r1, #80]	; 0x50
 80035de:	e001      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d042      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f8:	d02b      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fe:	d825      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003600:	2bc0      	cmp	r3, #192	; 0xc0
 8003602:	d028      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003604:	2bc0      	cmp	r3, #192	; 0xc0
 8003606:	d821      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d016      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d81d      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d007      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003618:	e018      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361a:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	4a5d      	ldr	r2, [pc, #372]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003626:	e017      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f94a 	bl	80048c8 <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003638:	e00e      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3324      	adds	r3, #36	; 0x24
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f001 f9f3 	bl	8004a2c <RCCEx_PLL3_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800364a:	e005      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
      break;
 8003650:	e002      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800365e:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003662:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	494a      	ldr	r1, [pc, #296]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	650b      	str	r3, [r1, #80]	; 0x50
 8003670:	e001      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	7dfb      	ldrb	r3, [r7, #23]
 8003674:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367e:	2b00      	cmp	r3, #0
 8003680:	d049      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800368c:	d030      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800368e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003692:	d82a      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003694:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003698:	d02c      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800369a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800369e:	d824      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a4:	d018      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036aa:	d81e      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036b4:	d007      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036b6:	e018      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b8:	4b36      	ldr	r3, [pc, #216]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	4a35      	ldr	r2, [pc, #212]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c4:	e017      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 f8fb 	bl	80048c8 <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036d6:	e00e      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3324      	adds	r3, #36	; 0x24
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 f9a4 	bl	8004a2c <RCCEx_PLL3_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e8:	e005      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036f0:	bf00      	nop
 80036f2:	e000      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800370a:	4922      	ldr	r1, [pc, #136]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800370c:	4313      	orrs	r3, r2
 800370e:	658b      	str	r3, [r1, #88]	; 0x58
 8003710:	e001      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800371e:	2b00      	cmp	r3, #0
 8003720:	d04b      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800372c:	d030      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800372e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003732:	d82a      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003734:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003738:	d02e      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800373a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800373e:	d824      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003744:	d018      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800374a:	d81e      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003754:	d007      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003756:	e018      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800375e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003764:	e019      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f001 f8ab 	bl	80048c8 <RCCEx_PLL2_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003776:	e010      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3324      	adds	r3, #36	; 0x24
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f001 f954 	bl	8004a2c <RCCEx_PLL3_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003788:	e007      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
      break;
 800378e:	e004      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003790:	bf00      	nop
 8003792:	e002      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003794:	58024400 	.word	0x58024400
      break;
 8003798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037a0:	4b99      	ldr	r3, [pc, #612]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037ae:	4996      	ldr	r1, [pc, #600]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	658b      	str	r3, [r1, #88]	; 0x58
 80037b4:	e001      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
 80037b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d032      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	2b30      	cmp	r3, #48	; 0x30
 80037cc:	d01c      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80037ce:	2b30      	cmp	r3, #48	; 0x30
 80037d0:	d817      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d00c      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d813      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d016      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d10f      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e2:	4b89      	ldr	r3, [pc, #548]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	4a88      	ldr	r2, [pc, #544]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037ee:	e00e      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 f866 	bl	80048c8 <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003800:	e005      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
      break;
 8003806:	e002      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003808:	bf00      	nop
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800380c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003814:	4b7c      	ldr	r3, [pc, #496]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003818:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003820:	4979      	ldr	r1, [pc, #484]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003822:	4313      	orrs	r3, r2
 8003824:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003826:	e001      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d047      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003840:	d030      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003846:	d82a      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800384c:	d02c      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800384e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003852:	d824      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003858:	d018      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800385a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385e:	d81e      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003868:	d007      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800386a:	e018      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386c:	4b66      	ldr	r3, [pc, #408]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4a65      	ldr	r2, [pc, #404]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003878:	e017      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f001 f821 	bl	80048c8 <RCCEx_PLL2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800388a:	e00e      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3324      	adds	r3, #36	; 0x24
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f001 f8ca 	bl	8004a2c <RCCEx_PLL3_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800389c:	e005      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
      break;
 80038a2:	e002      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038b0:	4b55      	ldr	r3, [pc, #340]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	4952      	ldr	r1, [pc, #328]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	650b      	str	r3, [r1, #80]	; 0x50
 80038c2:	e001      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d049      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038dc:	d02e      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e2:	d828      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038e8:	d02a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80038ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038ee:	d822      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038f4:	d026      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80038f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038fa:	d81c      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003900:	d010      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003906:	d816      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01d      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003910:	d111      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	2101      	movs	r1, #1
 8003918:	4618      	mov	r0, r3
 800391a:	f000 ffd5 	bl	80048c8 <RCCEx_PLL2_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003922:	e012      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3324      	adds	r3, #36	; 0x24
 8003928:	2101      	movs	r1, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f001 f87e 	bl	8004a2c <RCCEx_PLL3_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003934:	e009      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
      break;
 800393a:	e006      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800393c:	bf00      	nop
 800393e:	e004      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003950:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003954:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	492a      	ldr	r1, [pc, #168]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800395e:	4313      	orrs	r3, r2
 8003960:	650b      	str	r3, [r1, #80]	; 0x50
 8003962:	e001      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
 8003966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d04d      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800397a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800397e:	d02e      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003984:	d828      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398a:	d02a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003990:	d822      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003992:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003996:	d026      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003998:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800399c:	d81c      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800399e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a2:	d010      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80039a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a8:	d816      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01d      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80039ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b2:	d111      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	2101      	movs	r1, #1
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 ff84 	bl	80048c8 <RCCEx_PLL2_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039c4:	e012      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3324      	adds	r3, #36	; 0x24
 80039ca:	2101      	movs	r1, #1
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 f82d 	bl	8004a2c <RCCEx_PLL3_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039d6:	e009      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
      break;
 80039dc:	e006      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039de:	bf00      	nop
 80039e0:	e004      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039e2:	bf00      	nop
 80039e4:	e002      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a00:	4901      	ldr	r1, [pc, #4]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	658b      	str	r3, [r1, #88]	; 0x58
 8003a06:	e003      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d02f      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a24:	d00e      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a2a:	d814      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a34:	d10f      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a36:	4baf      	ldr	r3, [pc, #700]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	4aae      	ldr	r2, [pc, #696]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a42:	e00c      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	2101      	movs	r1, #1
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 ff3c 	bl	80048c8 <RCCEx_PLL2_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a54:	e003      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5a:	e000      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a64:	4ba3      	ldr	r3, [pc, #652]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a70:	49a0      	ldr	r1, [pc, #640]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	650b      	str	r3, [r1, #80]	; 0x50
 8003a76:	e001      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d032      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d81b      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003acf 	.word	0x08003acf
 8003a9c:	08003aa9 	.word	0x08003aa9
 8003aa0:	08003ab7 	.word	0x08003ab7
 8003aa4:	08003acf 	.word	0x08003acf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa8:	4b92      	ldr	r3, [pc, #584]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	4a91      	ldr	r2, [pc, #580]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ab4:	e00c      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2102      	movs	r1, #2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 ff03 	bl	80048c8 <RCCEx_PLL2_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ac6:	e003      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
      break;
 8003acc:	e000      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ad6:	4b87      	ldr	r3, [pc, #540]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	4984      	ldr	r1, [pc, #528]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ae8:	e001      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8086 	beq.w	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003afc:	4b7e      	ldr	r3, [pc, #504]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a7d      	ldr	r2, [pc, #500]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b08:	f7fd fad0 	bl	80010ac <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b0e:	e009      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fd facc 	bl	80010ac <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d902      	bls.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	75fb      	strb	r3, [r7, #23]
        break;
 8003b22:	e005      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b24:	4b74      	ldr	r3, [pc, #464]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ef      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d166      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b36:	4b6f      	ldr	r3, [pc, #444]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b40:	4053      	eors	r3, r2
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d013      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b52:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b54:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	4a66      	ldr	r2, [pc, #408]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b60:	4b64      	ldr	r3, [pc, #400]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	4a63      	ldr	r2, [pc, #396]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b6c:	4a61      	ldr	r2, [pc, #388]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7c:	d115      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7fd fa95 	bl	80010ac <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b84:	e00b      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fd fa91 	bl	80010ac <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d902      	bls.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	75fb      	strb	r3, [r7, #23]
            break;
 8003b9c:	e005      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b9e:	4b55      	ldr	r3, [pc, #340]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0ed      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d126      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bbe:	d10d      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003bc0:	4b4c      	ldr	r3, [pc, #304]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bce:	0919      	lsrs	r1, r3, #4
 8003bd0:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003bd2:	400b      	ands	r3, r1
 8003bd4:	4947      	ldr	r1, [pc, #284]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	610b      	str	r3, [r1, #16]
 8003bda:	e005      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003bdc:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	4a44      	ldr	r2, [pc, #272]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003be2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003be6:	6113      	str	r3, [r2, #16]
 8003be8:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf6:	493f      	ldr	r1, [pc, #252]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	670b      	str	r3, [r1, #112]	; 0x70
 8003bfc:	e004      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	75bb      	strb	r3, [r7, #22]
 8003c02:	e001      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8085 	beq.w	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c1a:	2b28      	cmp	r3, #40	; 0x28
 8003c1c:	d866      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003d01 	.word	0x08003d01
 8003c28:	08003ced 	.word	0x08003ced
 8003c2c:	08003ced 	.word	0x08003ced
 8003c30:	08003ced 	.word	0x08003ced
 8003c34:	08003ced 	.word	0x08003ced
 8003c38:	08003ced 	.word	0x08003ced
 8003c3c:	08003ced 	.word	0x08003ced
 8003c40:	08003ced 	.word	0x08003ced
 8003c44:	08003cc9 	.word	0x08003cc9
 8003c48:	08003ced 	.word	0x08003ced
 8003c4c:	08003ced 	.word	0x08003ced
 8003c50:	08003ced 	.word	0x08003ced
 8003c54:	08003ced 	.word	0x08003ced
 8003c58:	08003ced 	.word	0x08003ced
 8003c5c:	08003ced 	.word	0x08003ced
 8003c60:	08003ced 	.word	0x08003ced
 8003c64:	08003cdb 	.word	0x08003cdb
 8003c68:	08003ced 	.word	0x08003ced
 8003c6c:	08003ced 	.word	0x08003ced
 8003c70:	08003ced 	.word	0x08003ced
 8003c74:	08003ced 	.word	0x08003ced
 8003c78:	08003ced 	.word	0x08003ced
 8003c7c:	08003ced 	.word	0x08003ced
 8003c80:	08003ced 	.word	0x08003ced
 8003c84:	08003d01 	.word	0x08003d01
 8003c88:	08003ced 	.word	0x08003ced
 8003c8c:	08003ced 	.word	0x08003ced
 8003c90:	08003ced 	.word	0x08003ced
 8003c94:	08003ced 	.word	0x08003ced
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003ced 	.word	0x08003ced
 8003ca0:	08003ced 	.word	0x08003ced
 8003ca4:	08003d01 	.word	0x08003d01
 8003ca8:	08003ced 	.word	0x08003ced
 8003cac:	08003ced 	.word	0x08003ced
 8003cb0:	08003ced 	.word	0x08003ced
 8003cb4:	08003ced 	.word	0x08003ced
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003ced 	.word	0x08003ced
 8003cc0:	08003ced 	.word	0x08003ced
 8003cc4:	08003d01 	.word	0x08003d01
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fdfa 	bl	80048c8 <RCCEx_PLL2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cd8:	e013      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3324      	adds	r3, #36	; 0x24
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fea3 	bl	8004a2c <RCCEx_PLL3_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cea:	e00a      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf0:	e007      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	58024800 	.word	0x58024800
 8003cfc:	00ffffcf 	.word	0x00ffffcf
      break;
 8003d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d08:	4b96      	ldr	r3, [pc, #600]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d14:	4993      	ldr	r1, [pc, #588]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	654b      	str	r3, [r1, #84]	; 0x54
 8003d1a:	e001      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d038      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d821      	bhi.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d7f 	.word	0x08003d7f
 8003d40:	08003d55 	.word	0x08003d55
 8003d44:	08003d67 	.word	0x08003d67
 8003d48:	08003d7f 	.word	0x08003d7f
 8003d4c:	08003d7f 	.word	0x08003d7f
 8003d50:	08003d7f 	.word	0x08003d7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	2101      	movs	r1, #1
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fdb4 	bl	80048c8 <RCCEx_PLL2_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d64:	e00c      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3324      	adds	r3, #36	; 0x24
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fe5d 	bl	8004a2c <RCCEx_PLL3_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d76:	e003      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7c:	e000      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d86:	4b77      	ldr	r3, [pc, #476]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	f023 0207 	bic.w	r2, r3, #7
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d92:	4974      	ldr	r1, [pc, #464]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	654b      	str	r3, [r1, #84]	; 0x54
 8003d98:	e001      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	2b05      	cmp	r3, #5
 8003db2:	d821      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003db4:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003dff 	.word	0x08003dff
 8003dc0:	08003dd5 	.word	0x08003dd5
 8003dc4:	08003de7 	.word	0x08003de7
 8003dc8:	08003dff 	.word	0x08003dff
 8003dcc:	08003dff 	.word	0x08003dff
 8003dd0:	08003dff 	.word	0x08003dff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fd74 	bl	80048c8 <RCCEx_PLL2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003de4:	e00c      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3324      	adds	r3, #36	; 0x24
 8003dea:	2101      	movs	r1, #1
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fe1d 	bl	8004a2c <RCCEx_PLL3_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003df6:	e003      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfc:	e000      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e06:	4b57      	ldr	r3, [pc, #348]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	f023 0207 	bic.w	r2, r3, #7
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	4953      	ldr	r1, [pc, #332]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	658b      	str	r3, [r1, #88]	; 0x58
 8003e1a:	e001      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d04b      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e36:	d02e      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e3c:	d828      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e42:	d02a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e48:	d822      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e4e:	d026      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e54:	d81c      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e5a:	d010      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e60:	d816      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01d      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e6a:	d111      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fd28 	bl	80048c8 <RCCEx_PLL2_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e7c:	e012      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3324      	adds	r3, #36	; 0x24
 8003e82:	2102      	movs	r1, #2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fdd1 	bl	8004a2c <RCCEx_PLL3_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
      break;
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e96:	bf00      	nop
 8003e98:	e004      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eaa:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb8:	492a      	ldr	r1, [pc, #168]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	654b      	str	r3, [r1, #84]	; 0x54
 8003ebe:	e001      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d04d      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003eda:	d02e      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003edc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ee0:	d828      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee6:	d02a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eec:	d822      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003eee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ef2:	d026      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003ef4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ef8:	d81c      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efe:	d010      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f04:	d816      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01d      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d111      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fcd6 	bl	80048c8 <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f20:	e012      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	2102      	movs	r1, #2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fd7f 	bl	8004a2c <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f32:	e009      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e004      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f5c:	4901      	ldr	r1, [pc, #4]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	658b      	str	r3, [r1, #88]	; 0x58
 8003f62:	e003      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d04b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f82:	d02e      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f88:	d828      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8e:	d02a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f94:	d822      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f9a:	d026      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003f9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fa0:	d81c      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa6:	d010      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fac:	d816      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01d      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb6:	d111      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fc82 	bl	80048c8 <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fc8:	e012      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3324      	adds	r3, #36	; 0x24
 8003fce:	2102      	movs	r1, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fd2b 	bl	8004a2c <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fda:	e009      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe0:	e006      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ff6:	4b9d      	ldr	r3, [pc, #628]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004004:	4999      	ldr	r1, [pc, #612]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004006:	4313      	orrs	r3, r2
 8004008:	658b      	str	r3, [r1, #88]	; 0x58
 800400a:	e001      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	d10a      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3324      	adds	r3, #36	; 0x24
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fcfc 	bl	8004a2c <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800403e:	4b8b      	ldr	r3, [pc, #556]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404c:	4987      	ldr	r1, [pc, #540]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800404e:	4313      	orrs	r3, r2
 8004050:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004068:	d10a      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3324      	adds	r3, #36	; 0x24
 800406e:	2102      	movs	r1, #2
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fcdb 	bl	8004a2c <RCCEx_PLL3_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004080:	4b7a      	ldr	r3, [pc, #488]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408e:	4977      	ldr	r1, [pc, #476]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004090:	4313      	orrs	r3, r2
 8004092:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d034      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040aa:	d01d      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80040ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b0:	d817      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ba:	d009      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80040bc:	e011      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fbff 	bl	80048c8 <RCCEx_PLL2_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040ce:	e00c      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3324      	adds	r3, #36	; 0x24
 80040d4:	2102      	movs	r1, #2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fca8 	bl	8004a2c <RCCEx_PLL3_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
      break;
 80040e6:	e000      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80040e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040f0:	4b5e      	ldr	r3, [pc, #376]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040fe:	495b      	ldr	r1, [pc, #364]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004100:	4313      	orrs	r3, r2
 8004102:	658b      	str	r3, [r1, #88]	; 0x58
 8004104:	e001      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d033      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004120:	d01c      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004122:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004126:	d816      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412c:	d003      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800412e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004132:	d007      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004134:	e00f      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004136:	4b4d      	ldr	r3, [pc, #308]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	4a4c      	ldr	r2, [pc, #304]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800413c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004140:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004142:	e00c      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3324      	adds	r3, #36	; 0x24
 8004148:	2101      	movs	r1, #1
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fc6e 	bl	8004a2c <RCCEx_PLL3_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004154:	e003      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	75fb      	strb	r3, [r7, #23]
      break;
 800415a:	e000      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800415c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004164:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004172:	493e      	ldr	r1, [pc, #248]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004174:	4313      	orrs	r3, r2
 8004176:	654b      	str	r3, [r1, #84]	; 0x54
 8004178:	e001      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417a:	7dfb      	ldrb	r3, [r7, #23]
 800417c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d029      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004196:	d007      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004198:	e00f      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419a:	4b34      	ldr	r3, [pc, #208]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	4a33      	ldr	r2, [pc, #204]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041a6:	e00b      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	2102      	movs	r1, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fb8a 	bl	80048c8 <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041b8:	e002      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
      break;
 80041be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041c6:	4b29      	ldr	r3, [pc, #164]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	4926      	ldr	r1, [pc, #152]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041d8:	e001      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
 80041dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3324      	adds	r3, #36	; 0x24
 80041ee:	2102      	movs	r1, #2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fc1b 	bl	8004a2c <RCCEx_PLL3_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d033      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004214:	d017      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800421a:	d811      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800421c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004220:	d013      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004226:	d80b      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800422c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004230:	d106      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	4a0d      	ldr	r2, [pc, #52]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800423c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800423e:	e007      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      break;
 8004244:	e004      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800424e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004262:	4902      	ldr	r1, [pc, #8]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004264:	4313      	orrs	r3, r2
 8004266:	654b      	str	r3, [r1, #84]	; 0x54
 8004268:	e004      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800426a:	bf00      	nop
 800426c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004280:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	492e      	ldr	r1, [pc, #184]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800428e:	4313      	orrs	r3, r2
 8004290:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042ac:	4926      	ldr	r1, [pc, #152]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042be:	4b22      	ldr	r3, [pc, #136]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ca:	491f      	ldr	r1, [pc, #124]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00d      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042dc:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	4a19      	ldr	r2, [pc, #100]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042e6:	6113      	str	r3, [r2, #16]
 80042e8:	4b17      	ldr	r3, [pc, #92]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042f2:	4915      	ldr	r1, [pc, #84]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	da08      	bge.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004304:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430c:	490e      	ldr	r1, [pc, #56]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800430e:	4313      	orrs	r3, r2
 8004310:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	4906      	ldr	r1, [pc, #24]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800432e:	4313      	orrs	r3, r2
 8004330:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004332:	7dbb      	ldrb	r3, [r7, #22]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	58024400 	.word	0x58024400

0800434c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004350:	f7ff f85a 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4904      	ldr	r1, [pc, #16]	; (8004374 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	58024400 	.word	0x58024400
 8004374:	08005ee4 	.word	0x08005ee4

08004378 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004380:	4ba1      	ldr	r3, [pc, #644]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800438a:	4b9f      	ldr	r3, [pc, #636]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	0b1b      	lsrs	r3, r3, #12
 8004390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004394:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004396:	4b9c      	ldr	r3, [pc, #624]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80043a2:	4b99      	ldr	r3, [pc, #612]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	08db      	lsrs	r3, r3, #3
 80043a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8111 	beq.w	80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	f000 8083 	beq.w	80044d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	f200 80a1 	bhi.w	8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d056      	beq.n	8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043e2:	e099      	b.n	8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043e4:	4b88      	ldr	r3, [pc, #544]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d02d      	beq.n	800444c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043f0:	4b85      	ldr	r3, [pc, #532]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	08db      	lsrs	r3, r3, #3
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	4a84      	ldr	r2, [pc, #528]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	ee07 3a90 	vmov	s15, r3
 8004408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441a:	4b7b      	ldr	r3, [pc, #492]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442a:	ed97 6a03 	vldr	s12, [r7, #12]
 800442e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800443e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004446:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800444a:	e087      	b.n	800455c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004456:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800445a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445e:	4b6a      	ldr	r3, [pc, #424]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004472:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800448e:	e065      	b.n	800455c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800449e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a2:	4b59      	ldr	r3, [pc, #356]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044d2:	e043      	b.n	800455c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800461c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e6:	4b48      	ldr	r3, [pc, #288]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004512:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004516:	e021      	b.n	800455c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452a:	4b37      	ldr	r3, [pc, #220]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453a:	ed97 6a03 	vldr	s12, [r7, #12]
 800453e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800454e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004556:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800455a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800455c:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	0a5b      	lsrs	r3, r3, #9
 8004562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004576:	edd7 6a07 	vldr	s13, [r7, #28]
 800457a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800457e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004582:	ee17 2a90 	vmov	r2, s15
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800458a:	4b1f      	ldr	r3, [pc, #124]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b0:	ee17 2a90 	vmov	r2, s15
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045b8:	4b13      	ldr	r3, [pc, #76]	; (8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	0e1b      	lsrs	r3, r3, #24
 80045be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045de:	ee17 2a90 	vmov	r2, s15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
}
 80045fa:	bf00      	nop
 80045fc:	3724      	adds	r7, #36	; 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	58024400 	.word	0x58024400
 800460c:	03d09000 	.word	0x03d09000
 8004610:	46000000 	.word	0x46000000
 8004614:	4c742400 	.word	0x4c742400
 8004618:	4a742400 	.word	0x4a742400
 800461c:	4af42400 	.word	0x4af42400

08004620 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004628:	4ba1      	ldr	r3, [pc, #644]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004632:	4b9f      	ldr	r3, [pc, #636]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	0d1b      	lsrs	r3, r3, #20
 8004638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800463c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800463e:	4b9c      	ldr	r3, [pc, #624]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800464a:	4b99      	ldr	r3, [pc, #612]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	08db      	lsrs	r3, r3, #3
 8004650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004662:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8111 	beq.w	8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b02      	cmp	r3, #2
 8004672:	f000 8083 	beq.w	800477c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b02      	cmp	r3, #2
 800467a:	f200 80a1 	bhi.w	80047c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d056      	beq.n	8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800468a:	e099      	b.n	80047c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800468c:	4b88      	ldr	r3, [pc, #544]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d02d      	beq.n	80046f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004698:	4b85      	ldr	r3, [pc, #532]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	08db      	lsrs	r3, r3, #3
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	4a84      	ldr	r2, [pc, #528]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
 80046a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	ee07 3a90 	vmov	s15, r3
 80046b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c2:	4b7b      	ldr	r3, [pc, #492]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046f2:	e087      	b.n	8004804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004706:	4b6a      	ldr	r3, [pc, #424]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004716:	ed97 6a03 	vldr	s12, [r7, #12]
 800471a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800471e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004736:	e065      	b.n	8004804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474a:	4b59      	ldr	r3, [pc, #356]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475a:	ed97 6a03 	vldr	s12, [r7, #12]
 800475e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800476e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800477a:	e043      	b.n	8004804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800478a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478e:	4b48      	ldr	r3, [pc, #288]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479e:	ed97 6a03 	vldr	s12, [r7, #12]
 80047a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047be:	e021      	b.n	8004804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d2:	4b37      	ldr	r3, [pc, #220]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004802:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004804:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	0a5b      	lsrs	r3, r3, #9
 800480a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800481a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800481e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482a:	ee17 2a90 	vmov	r2, s15
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004832:	4b1f      	ldr	r3, [pc, #124]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	0c1b      	lsrs	r3, r3, #16
 8004838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800483c:	ee07 3a90 	vmov	s15, r3
 8004840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004848:	ee37 7a87 	vadd.f32	s14, s15, s14
 800484c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004858:	ee17 2a90 	vmov	r2, s15
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	0e1b      	lsrs	r3, r3, #24
 8004866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800487a:	edd7 6a07 	vldr	s13, [r7, #28]
 800487e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004886:	ee17 2a90 	vmov	r2, s15
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800488e:	e008      	b.n	80048a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
}
 80048a2:	bf00      	nop
 80048a4:	3724      	adds	r7, #36	; 0x24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	58024400 	.word	0x58024400
 80048b4:	03d09000 	.word	0x03d09000
 80048b8:	46000000 	.word	0x46000000
 80048bc:	4c742400 	.word	0x4c742400
 80048c0:	4a742400 	.word	0x4a742400
 80048c4:	4af42400 	.word	0x4af42400

080048c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048d6:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d101      	bne.n	80048e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e099      	b.n	8004a1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048e6:	4b4f      	ldr	r3, [pc, #316]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a4e      	ldr	r2, [pc, #312]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80048ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f2:	f7fc fbdb 	bl	80010ac <HAL_GetTick>
 80048f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048f8:	e008      	b.n	800490c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048fa:	f7fc fbd7 	bl	80010ac <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e086      	b.n	8004a1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800490c:	4b45      	ldr	r3, [pc, #276]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004918:	4b42      	ldr	r3, [pc, #264]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	031b      	lsls	r3, r3, #12
 8004926:	493f      	ldr	r1, [pc, #252]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 8004928:	4313      	orrs	r3, r2
 800492a:	628b      	str	r3, [r1, #40]	; 0x28
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	3b01      	subs	r3, #1
 8004932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	3b01      	subs	r3, #1
 800493c:	025b      	lsls	r3, r3, #9
 800493e:	b29b      	uxth	r3, r3
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	3b01      	subs	r3, #1
 8004948:	041b      	lsls	r3, r3, #16
 800494a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	3b01      	subs	r3, #1
 8004956:	061b      	lsls	r3, r3, #24
 8004958:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800495c:	4931      	ldr	r1, [pc, #196]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004962:	4b30      	ldr	r3, [pc, #192]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	492d      	ldr	r1, [pc, #180]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 8004970:	4313      	orrs	r3, r2
 8004972:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004974:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	f023 0220 	bic.w	r2, r3, #32
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	4928      	ldr	r1, [pc, #160]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004986:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 800498c:	f023 0310 	bic.w	r3, r3, #16
 8004990:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 8004994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004996:	4b24      	ldr	r3, [pc, #144]	; (8004a28 <RCCEx_PLL2_Config+0x160>)
 8004998:	4013      	ands	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	69d2      	ldr	r2, [r2, #28]
 800499e:	00d2      	lsls	r2, r2, #3
 80049a0:	4920      	ldr	r1, [pc, #128]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049a6:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049ac:	f043 0310 	orr.w	r3, r3, #16
 80049b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d106      	bne.n	80049c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049c4:	e00f      	b.n	80049e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d106      	bne.n	80049da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049cc:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049d8:	e005      	b.n	80049e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	4a11      	ldr	r2, [pc, #68]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049e6:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f2:	f7fc fb5b 	bl	80010ac <HAL_GetTick>
 80049f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049f8:	e008      	b.n	8004a0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049fa:	f7fc fb57 	bl	80010ac <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e006      	b.n	8004a1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <RCCEx_PLL2_Config+0x15c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	58024400 	.word	0x58024400
 8004a28:	ffff0007 	.word	0xffff0007

08004a2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a3a:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d101      	bne.n	8004a4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e099      	b.n	8004b7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a4a:	4b4f      	ldr	r3, [pc, #316]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a4e      	ldr	r2, [pc, #312]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a56:	f7fc fb29 	bl	80010ac <HAL_GetTick>
 8004a5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a5c:	e008      	b.n	8004a70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a5e:	f7fc fb25 	bl	80010ac <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e086      	b.n	8004b7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a70:	4b45      	ldr	r3, [pc, #276]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a7c:	4b42      	ldr	r3, [pc, #264]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	051b      	lsls	r3, r3, #20
 8004a8a:	493f      	ldr	r1, [pc, #252]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	025b      	lsls	r3, r3, #9
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	061b      	lsls	r3, r3, #24
 8004abc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ac0:	4931      	ldr	r1, [pc, #196]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ac6:	4b30      	ldr	r3, [pc, #192]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	492d      	ldr	r1, [pc, #180]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	4928      	ldr	r1, [pc, #160]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <RCCEx_PLL3_Config+0x160>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	69d2      	ldr	r2, [r2, #28]
 8004b02:	00d2      	lsls	r2, r2, #3
 8004b04:	4920      	ldr	r1, [pc, #128]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b0a:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b28:	e00f      	b.n	8004b4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b30:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b3c:	e005      	b.n	8004b4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4a11      	ldr	r2, [pc, #68]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b4a:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b56:	f7fc faa9 	bl	80010ac <HAL_GetTick>
 8004b5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b5c:	e008      	b.n	8004b70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b5e:	f7fc faa5 	bl	80010ac <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e006      	b.n	8004b7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <RCCEx_PLL3_Config+0x15c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	ffff0007 	.word	0xffff0007

08004b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e042      	b.n	8004c28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fc f917 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2224      	movs	r2, #36	; 0x24
 8004bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8c2 	bl	8004d5c <UART_SetConfig>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e022      	b.n	8004c28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fe1e 	bl	800582c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fea5 	bl	8005970 <UART_CheckIdleState>
 8004c26:	4603      	mov	r3, r0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	; 0x28
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	f040 8083 	bne.w	8004d52 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_UART_Transmit+0x28>
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e07b      	b.n	8004d54 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Transmit+0x3a>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e074      	b.n	8004d54 <HAL_UART_Transmit+0x124>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2221      	movs	r2, #33	; 0x21
 8004c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c82:	f7fc fa13 	bl	80010ac <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca0:	d108      	bne.n	8004cb4 <HAL_UART_Transmit+0x84>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	e003      	b.n	8004cbc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004cc4:	e02c      	b.n	8004d20 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2180      	movs	r1, #128	; 0x80
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fe98 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e039      	b.n	8004d54 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	e007      	b.n	8004d0e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	781a      	ldrb	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1cc      	bne.n	8004cc6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2200      	movs	r2, #0
 8004d34:	2140      	movs	r1, #64	; 0x40
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fe65 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e006      	b.n	8004d54 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e000      	b.n	8004d54 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d52:	2302      	movs	r3, #2
  }
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b092      	sub	sp, #72	; 0x48
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4bbe      	ldr	r3, [pc, #760]	; (8005084 <UART_SetConfig+0x328>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4ab3      	ldr	r2, [pc, #716]	; (8005088 <UART_SetConfig+0x32c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	4baf      	ldr	r3, [pc, #700]	; (800508c <UART_SetConfig+0x330>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	f023 010f 	bic.w	r1, r3, #15
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4aa6      	ldr	r2, [pc, #664]	; (8005090 <UART_SetConfig+0x334>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d177      	bne.n	8004eec <UART_SetConfig+0x190>
 8004dfc:	4ba5      	ldr	r3, [pc, #660]	; (8005094 <UART_SetConfig+0x338>)
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e04:	2b28      	cmp	r3, #40	; 0x28
 8004e06:	d86d      	bhi.n	8004ee4 <UART_SetConfig+0x188>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <UART_SetConfig+0xb4>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004eb5 	.word	0x08004eb5
 8004e14:	08004ee5 	.word	0x08004ee5
 8004e18:	08004ee5 	.word	0x08004ee5
 8004e1c:	08004ee5 	.word	0x08004ee5
 8004e20:	08004ee5 	.word	0x08004ee5
 8004e24:	08004ee5 	.word	0x08004ee5
 8004e28:	08004ee5 	.word	0x08004ee5
 8004e2c:	08004ee5 	.word	0x08004ee5
 8004e30:	08004ebd 	.word	0x08004ebd
 8004e34:	08004ee5 	.word	0x08004ee5
 8004e38:	08004ee5 	.word	0x08004ee5
 8004e3c:	08004ee5 	.word	0x08004ee5
 8004e40:	08004ee5 	.word	0x08004ee5
 8004e44:	08004ee5 	.word	0x08004ee5
 8004e48:	08004ee5 	.word	0x08004ee5
 8004e4c:	08004ee5 	.word	0x08004ee5
 8004e50:	08004ec5 	.word	0x08004ec5
 8004e54:	08004ee5 	.word	0x08004ee5
 8004e58:	08004ee5 	.word	0x08004ee5
 8004e5c:	08004ee5 	.word	0x08004ee5
 8004e60:	08004ee5 	.word	0x08004ee5
 8004e64:	08004ee5 	.word	0x08004ee5
 8004e68:	08004ee5 	.word	0x08004ee5
 8004e6c:	08004ee5 	.word	0x08004ee5
 8004e70:	08004ecd 	.word	0x08004ecd
 8004e74:	08004ee5 	.word	0x08004ee5
 8004e78:	08004ee5 	.word	0x08004ee5
 8004e7c:	08004ee5 	.word	0x08004ee5
 8004e80:	08004ee5 	.word	0x08004ee5
 8004e84:	08004ee5 	.word	0x08004ee5
 8004e88:	08004ee5 	.word	0x08004ee5
 8004e8c:	08004ee5 	.word	0x08004ee5
 8004e90:	08004ed5 	.word	0x08004ed5
 8004e94:	08004ee5 	.word	0x08004ee5
 8004e98:	08004ee5 	.word	0x08004ee5
 8004e9c:	08004ee5 	.word	0x08004ee5
 8004ea0:	08004ee5 	.word	0x08004ee5
 8004ea4:	08004ee5 	.word	0x08004ee5
 8004ea8:	08004ee5 	.word	0x08004ee5
 8004eac:	08004ee5 	.word	0x08004ee5
 8004eb0:	08004edd 	.word	0x08004edd
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eba:	e222      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec2:	e21e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eca:	e21a      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e216      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eda:	e212      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004edc:	2340      	movs	r3, #64	; 0x40
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee2:	e20e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eea:	e20a      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a69      	ldr	r2, [pc, #420]	; (8005098 <UART_SetConfig+0x33c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d130      	bne.n	8004f58 <UART_SetConfig+0x1fc>
 8004ef6:	4b67      	ldr	r3, [pc, #412]	; (8005094 <UART_SetConfig+0x338>)
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	2b05      	cmp	r3, #5
 8004f00:	d826      	bhi.n	8004f50 <UART_SetConfig+0x1f4>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x1ac>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f21 	.word	0x08004f21
 8004f0c:	08004f29 	.word	0x08004f29
 8004f10:	08004f31 	.word	0x08004f31
 8004f14:	08004f39 	.word	0x08004f39
 8004f18:	08004f41 	.word	0x08004f41
 8004f1c:	08004f49 	.word	0x08004f49
 8004f20:	2300      	movs	r3, #0
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f26:	e1ec      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2e:	e1e8      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f30:	2308      	movs	r3, #8
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e1e4      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e1e0      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f40:	2320      	movs	r3, #32
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e1dc      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f48:	2340      	movs	r3, #64	; 0x40
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e1d8      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e1d4      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a4f      	ldr	r2, [pc, #316]	; (800509c <UART_SetConfig+0x340>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d130      	bne.n	8004fc4 <UART_SetConfig+0x268>
 8004f62:	4b4c      	ldr	r3, [pc, #304]	; (8005094 <UART_SetConfig+0x338>)
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	d826      	bhi.n	8004fbc <UART_SetConfig+0x260>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <UART_SetConfig+0x218>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f8d 	.word	0x08004f8d
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	08004f9d 	.word	0x08004f9d
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e1b6      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f94:	2304      	movs	r3, #4
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e1b2      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e1ae      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e1aa      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fac:	2320      	movs	r3, #32
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e1a6      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fb4:	2340      	movs	r3, #64	; 0x40
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e1a2      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e19e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a35      	ldr	r2, [pc, #212]	; (80050a0 <UART_SetConfig+0x344>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d130      	bne.n	8005030 <UART_SetConfig+0x2d4>
 8004fce:	4b31      	ldr	r3, [pc, #196]	; (8005094 <UART_SetConfig+0x338>)
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b05      	cmp	r3, #5
 8004fd8:	d826      	bhi.n	8005028 <UART_SetConfig+0x2cc>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x284>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08004ff9 	.word	0x08004ff9
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	08005009 	.word	0x08005009
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffe:	e180      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005000:	2304      	movs	r3, #4
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e17c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005008:	2308      	movs	r3, #8
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e178      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e174      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005018:	2320      	movs	r3, #32
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e170      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005020:	2340      	movs	r3, #64	; 0x40
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e16c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e168      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <UART_SetConfig+0x348>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d142      	bne.n	80050c0 <UART_SetConfig+0x364>
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <UART_SetConfig+0x338>)
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	2b05      	cmp	r3, #5
 8005044:	d838      	bhi.n	80050b8 <UART_SetConfig+0x35c>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <UART_SetConfig+0x2f0>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005065 	.word	0x08005065
 8005050:	0800506d 	.word	0x0800506d
 8005054:	08005075 	.word	0x08005075
 8005058:	0800507d 	.word	0x0800507d
 800505c:	080050a9 	.word	0x080050a9
 8005060:	080050b1 	.word	0x080050b1
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506a:	e14a      	b.n	8005302 <UART_SetConfig+0x5a6>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e146      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e142      	b.n	8005302 <UART_SetConfig+0x5a6>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e13e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005084:	cfff69f3 	.word	0xcfff69f3
 8005088:	58000c00 	.word	0x58000c00
 800508c:	11fff4ff 	.word	0x11fff4ff
 8005090:	40011000 	.word	0x40011000
 8005094:	58024400 	.word	0x58024400
 8005098:	40004400 	.word	0x40004400
 800509c:	40004800 	.word	0x40004800
 80050a0:	40004c00 	.word	0x40004c00
 80050a4:	40005000 	.word	0x40005000
 80050a8:	2320      	movs	r3, #32
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e128      	b.n	8005302 <UART_SetConfig+0x5a6>
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e124      	b.n	8005302 <UART_SetConfig+0x5a6>
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e120      	b.n	8005302 <UART_SetConfig+0x5a6>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4acb      	ldr	r2, [pc, #812]	; (80053f4 <UART_SetConfig+0x698>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d176      	bne.n	80051b8 <UART_SetConfig+0x45c>
 80050ca:	4bcb      	ldr	r3, [pc, #812]	; (80053f8 <UART_SetConfig+0x69c>)
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d2:	2b28      	cmp	r3, #40	; 0x28
 80050d4:	d86c      	bhi.n	80051b0 <UART_SetConfig+0x454>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0x380>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005181 	.word	0x08005181
 80050e0:	080051b1 	.word	0x080051b1
 80050e4:	080051b1 	.word	0x080051b1
 80050e8:	080051b1 	.word	0x080051b1
 80050ec:	080051b1 	.word	0x080051b1
 80050f0:	080051b1 	.word	0x080051b1
 80050f4:	080051b1 	.word	0x080051b1
 80050f8:	080051b1 	.word	0x080051b1
 80050fc:	08005189 	.word	0x08005189
 8005100:	080051b1 	.word	0x080051b1
 8005104:	080051b1 	.word	0x080051b1
 8005108:	080051b1 	.word	0x080051b1
 800510c:	080051b1 	.word	0x080051b1
 8005110:	080051b1 	.word	0x080051b1
 8005114:	080051b1 	.word	0x080051b1
 8005118:	080051b1 	.word	0x080051b1
 800511c:	08005191 	.word	0x08005191
 8005120:	080051b1 	.word	0x080051b1
 8005124:	080051b1 	.word	0x080051b1
 8005128:	080051b1 	.word	0x080051b1
 800512c:	080051b1 	.word	0x080051b1
 8005130:	080051b1 	.word	0x080051b1
 8005134:	080051b1 	.word	0x080051b1
 8005138:	080051b1 	.word	0x080051b1
 800513c:	08005199 	.word	0x08005199
 8005140:	080051b1 	.word	0x080051b1
 8005144:	080051b1 	.word	0x080051b1
 8005148:	080051b1 	.word	0x080051b1
 800514c:	080051b1 	.word	0x080051b1
 8005150:	080051b1 	.word	0x080051b1
 8005154:	080051b1 	.word	0x080051b1
 8005158:	080051b1 	.word	0x080051b1
 800515c:	080051a1 	.word	0x080051a1
 8005160:	080051b1 	.word	0x080051b1
 8005164:	080051b1 	.word	0x080051b1
 8005168:	080051b1 	.word	0x080051b1
 800516c:	080051b1 	.word	0x080051b1
 8005170:	080051b1 	.word	0x080051b1
 8005174:	080051b1 	.word	0x080051b1
 8005178:	080051b1 	.word	0x080051b1
 800517c:	080051a9 	.word	0x080051a9
 8005180:	2301      	movs	r3, #1
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e0bc      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e0b8      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e0b4      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519e:	e0b0      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051a0:	2320      	movs	r3, #32
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a6:	e0ac      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051a8:	2340      	movs	r3, #64	; 0x40
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ae:	e0a8      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e0a4      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a8f      	ldr	r2, [pc, #572]	; (80053fc <UART_SetConfig+0x6a0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d130      	bne.n	8005224 <UART_SetConfig+0x4c8>
 80051c2:	4b8d      	ldr	r3, [pc, #564]	; (80053f8 <UART_SetConfig+0x69c>)
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d826      	bhi.n	800521c <UART_SetConfig+0x4c0>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <UART_SetConfig+0x478>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080051ed 	.word	0x080051ed
 80051d8:	080051f5 	.word	0x080051f5
 80051dc:	080051fd 	.word	0x080051fd
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e086      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051f4:	2304      	movs	r3, #4
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e082      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051fc:	2308      	movs	r3, #8
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e07e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005204:	2310      	movs	r3, #16
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520a:	e07a      	b.n	8005302 <UART_SetConfig+0x5a6>
 800520c:	2320      	movs	r3, #32
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005212:	e076      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005214:	2340      	movs	r3, #64	; 0x40
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e072      	b.n	8005302 <UART_SetConfig+0x5a6>
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e06e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a75      	ldr	r2, [pc, #468]	; (8005400 <UART_SetConfig+0x6a4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d130      	bne.n	8005290 <UART_SetConfig+0x534>
 800522e:	4b72      	ldr	r3, [pc, #456]	; (80053f8 <UART_SetConfig+0x69c>)
 8005230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	2b05      	cmp	r3, #5
 8005238:	d826      	bhi.n	8005288 <UART_SetConfig+0x52c>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <UART_SetConfig+0x4e4>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005259 	.word	0x08005259
 8005244:	08005261 	.word	0x08005261
 8005248:	08005269 	.word	0x08005269
 800524c:	08005271 	.word	0x08005271
 8005250:	08005279 	.word	0x08005279
 8005254:	08005281 	.word	0x08005281
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e050      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e04c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e048      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e044      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005278:	2320      	movs	r3, #32
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527e:	e040      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005286:	e03c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528e:	e038      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a5b      	ldr	r2, [pc, #364]	; (8005404 <UART_SetConfig+0x6a8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d130      	bne.n	80052fc <UART_SetConfig+0x5a0>
 800529a:	4b57      	ldr	r3, [pc, #348]	; (80053f8 <UART_SetConfig+0x69c>)
 800529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d826      	bhi.n	80052f4 <UART_SetConfig+0x598>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x550>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052c5 	.word	0x080052c5
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	080052d5 	.word	0x080052d5
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052ed 	.word	0x080052ed
 80052c4:	2302      	movs	r3, #2
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e01a      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e016      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052da:	e012      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e2:	e00e      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052e4:	2320      	movs	r3, #32
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ea:	e00a      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052ec:	2340      	movs	r3, #64	; 0x40
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e006      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e002      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3f      	ldr	r2, [pc, #252]	; (8005404 <UART_SetConfig+0x6a8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	f040 80f8 	bne.w	80054fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800530e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005312:	2b20      	cmp	r3, #32
 8005314:	dc46      	bgt.n	80053a4 <UART_SetConfig+0x648>
 8005316:	2b02      	cmp	r3, #2
 8005318:	f2c0 8082 	blt.w	8005420 <UART_SetConfig+0x6c4>
 800531c:	3b02      	subs	r3, #2
 800531e:	2b1e      	cmp	r3, #30
 8005320:	d87e      	bhi.n	8005420 <UART_SetConfig+0x6c4>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <UART_SetConfig+0x5cc>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	080053ab 	.word	0x080053ab
 800532c:	08005421 	.word	0x08005421
 8005330:	080053b3 	.word	0x080053b3
 8005334:	08005421 	.word	0x08005421
 8005338:	08005421 	.word	0x08005421
 800533c:	08005421 	.word	0x08005421
 8005340:	080053c3 	.word	0x080053c3
 8005344:	08005421 	.word	0x08005421
 8005348:	08005421 	.word	0x08005421
 800534c:	08005421 	.word	0x08005421
 8005350:	08005421 	.word	0x08005421
 8005354:	08005421 	.word	0x08005421
 8005358:	08005421 	.word	0x08005421
 800535c:	08005421 	.word	0x08005421
 8005360:	080053d3 	.word	0x080053d3
 8005364:	08005421 	.word	0x08005421
 8005368:	08005421 	.word	0x08005421
 800536c:	08005421 	.word	0x08005421
 8005370:	08005421 	.word	0x08005421
 8005374:	08005421 	.word	0x08005421
 8005378:	08005421 	.word	0x08005421
 800537c:	08005421 	.word	0x08005421
 8005380:	08005421 	.word	0x08005421
 8005384:	08005421 	.word	0x08005421
 8005388:	08005421 	.word	0x08005421
 800538c:	08005421 	.word	0x08005421
 8005390:	08005421 	.word	0x08005421
 8005394:	08005421 	.word	0x08005421
 8005398:	08005421 	.word	0x08005421
 800539c:	08005421 	.word	0x08005421
 80053a0:	08005413 	.word	0x08005413
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d037      	beq.n	8005418 <UART_SetConfig+0x6bc>
 80053a8:	e03a      	b.n	8005420 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053aa:	f7fe ffcf 	bl	800434c <HAL_RCCEx_GetD3PCLK1Freq>
 80053ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053b0:	e03c      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe ffde 	bl	8004378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053c0:	e034      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053c2:	f107 0318 	add.w	r3, r7, #24
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff f92a 	bl	8004620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053d0:	e02c      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <UART_SetConfig+0x69c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <UART_SetConfig+0x69c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	08db      	lsrs	r3, r3, #3
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	4a07      	ldr	r2, [pc, #28]	; (8005408 <UART_SetConfig+0x6ac>)
 80053ea:	fa22 f303 	lsr.w	r3, r2, r3
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053f0:	e01c      	b.n	800542c <UART_SetConfig+0x6d0>
 80053f2:	bf00      	nop
 80053f4:	40011400 	.word	0x40011400
 80053f8:	58024400 	.word	0x58024400
 80053fc:	40007800 	.word	0x40007800
 8005400:	40007c00 	.word	0x40007c00
 8005404:	58000c00 	.word	0x58000c00
 8005408:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800540c:	4b9d      	ldr	r3, [pc, #628]	; (8005684 <UART_SetConfig+0x928>)
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005410:	e00c      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005412:	4b9d      	ldr	r3, [pc, #628]	; (8005688 <UART_SetConfig+0x92c>)
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005416:	e009      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800541e:	e005      	b.n	800542c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800542a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 81de 	beq.w	80057f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	4a94      	ldr	r2, [pc, #592]	; (800568c <UART_SetConfig+0x930>)
 800543a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543e:	461a      	mov	r2, r3
 8005440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005442:	fbb3 f3f2 	udiv	r3, r3, r2
 8005446:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4413      	add	r3, r2
 8005452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005454:	429a      	cmp	r2, r3
 8005456:	d305      	bcc.n	8005464 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800545e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005460:	429a      	cmp	r2, r3
 8005462:	d903      	bls.n	800546c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800546a:	e1c1      	b.n	80057f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546e:	2200      	movs	r2, #0
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	60fa      	str	r2, [r7, #12]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	4a84      	ldr	r2, [pc, #528]	; (800568c <UART_SetConfig+0x930>)
 800547a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800547e:	b29b      	uxth	r3, r3
 8005480:	2200      	movs	r2, #0
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	607a      	str	r2, [r7, #4]
 8005486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800548e:	f7fa ff23 	bl	80002d8 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	020b      	lsls	r3, r1, #8
 80054a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054a8:	0202      	lsls	r2, r0, #8
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	6849      	ldr	r1, [r1, #4]
 80054ae:	0849      	lsrs	r1, r1, #1
 80054b0:	2000      	movs	r0, #0
 80054b2:	460c      	mov	r4, r1
 80054b4:	4605      	mov	r5, r0
 80054b6:	eb12 0804 	adds.w	r8, r2, r4
 80054ba:	eb43 0905 	adc.w	r9, r3, r5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	469a      	mov	sl, r3
 80054c6:	4693      	mov	fp, r2
 80054c8:	4652      	mov	r2, sl
 80054ca:	465b      	mov	r3, fp
 80054cc:	4640      	mov	r0, r8
 80054ce:	4649      	mov	r1, r9
 80054d0:	f7fa ff02 	bl	80002d8 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4613      	mov	r3, r2
 80054da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e2:	d308      	bcc.n	80054f6 <UART_SetConfig+0x79a>
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ea:	d204      	bcs.n	80054f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f2:	60da      	str	r2, [r3, #12]
 80054f4:	e17c      	b.n	80057f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80054fc:	e178      	b.n	80057f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005506:	f040 80c5 	bne.w	8005694 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800550a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800550e:	2b20      	cmp	r3, #32
 8005510:	dc48      	bgt.n	80055a4 <UART_SetConfig+0x848>
 8005512:	2b00      	cmp	r3, #0
 8005514:	db7b      	blt.n	800560e <UART_SetConfig+0x8b2>
 8005516:	2b20      	cmp	r3, #32
 8005518:	d879      	bhi.n	800560e <UART_SetConfig+0x8b2>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x7c4>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	080055ab 	.word	0x080055ab
 8005524:	080055b3 	.word	0x080055b3
 8005528:	0800560f 	.word	0x0800560f
 800552c:	0800560f 	.word	0x0800560f
 8005530:	080055bb 	.word	0x080055bb
 8005534:	0800560f 	.word	0x0800560f
 8005538:	0800560f 	.word	0x0800560f
 800553c:	0800560f 	.word	0x0800560f
 8005540:	080055cb 	.word	0x080055cb
 8005544:	0800560f 	.word	0x0800560f
 8005548:	0800560f 	.word	0x0800560f
 800554c:	0800560f 	.word	0x0800560f
 8005550:	0800560f 	.word	0x0800560f
 8005554:	0800560f 	.word	0x0800560f
 8005558:	0800560f 	.word	0x0800560f
 800555c:	0800560f 	.word	0x0800560f
 8005560:	080055db 	.word	0x080055db
 8005564:	0800560f 	.word	0x0800560f
 8005568:	0800560f 	.word	0x0800560f
 800556c:	0800560f 	.word	0x0800560f
 8005570:	0800560f 	.word	0x0800560f
 8005574:	0800560f 	.word	0x0800560f
 8005578:	0800560f 	.word	0x0800560f
 800557c:	0800560f 	.word	0x0800560f
 8005580:	0800560f 	.word	0x0800560f
 8005584:	0800560f 	.word	0x0800560f
 8005588:	0800560f 	.word	0x0800560f
 800558c:	0800560f 	.word	0x0800560f
 8005590:	0800560f 	.word	0x0800560f
 8005594:	0800560f 	.word	0x0800560f
 8005598:	0800560f 	.word	0x0800560f
 800559c:	0800560f 	.word	0x0800560f
 80055a0:	08005601 	.word	0x08005601
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d02e      	beq.n	8005606 <UART_SetConfig+0x8aa>
 80055a8:	e031      	b.n	800560e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055aa:	f7fd ff5d 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 80055ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055b0:	e033      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b2:	f7fd ff6f 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 80055b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055b8:	e02f      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe feda 	bl	8004378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c8:	e027      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ca:	f107 0318 	add.w	r3, r7, #24
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff f826 	bl	8004620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055d8:	e01f      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055da:	4b2d      	ldr	r3, [pc, #180]	; (8005690 <UART_SetConfig+0x934>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055e6:	4b2a      	ldr	r3, [pc, #168]	; (8005690 <UART_SetConfig+0x934>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	08db      	lsrs	r3, r3, #3
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	4a24      	ldr	r2, [pc, #144]	; (8005684 <UART_SetConfig+0x928>)
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055f8:	e00f      	b.n	800561a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80055fa:	4b22      	ldr	r3, [pc, #136]	; (8005684 <UART_SetConfig+0x928>)
 80055fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055fe:	e00c      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005600:	4b21      	ldr	r3, [pc, #132]	; (8005688 <UART_SetConfig+0x92c>)
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005604:	e009      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560c:	e005      	b.n	800561a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80e7 	beq.w	80057f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	4a19      	ldr	r2, [pc, #100]	; (800568c <UART_SetConfig+0x930>)
 8005628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800562c:	461a      	mov	r2, r3
 800562e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005630:	fbb3 f3f2 	udiv	r3, r3, r2
 8005634:	005a      	lsls	r2, r3, #1
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	441a      	add	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	2b0f      	cmp	r3, #15
 800564c:	d916      	bls.n	800567c <UART_SetConfig+0x920>
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005654:	d212      	bcs.n	800567c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	b29b      	uxth	r3, r3
 800565a:	f023 030f 	bic.w	r3, r3, #15
 800565e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	b29b      	uxth	r3, r3
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	b29a      	uxth	r2, r3
 800566c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800566e:	4313      	orrs	r3, r2
 8005670:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	e0b9      	b.n	80057f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005682:	e0b5      	b.n	80057f0 <UART_SetConfig+0xa94>
 8005684:	03d09000 	.word	0x03d09000
 8005688:	003d0900 	.word	0x003d0900
 800568c:	08005f2c 	.word	0x08005f2c
 8005690:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005694:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005698:	2b20      	cmp	r3, #32
 800569a:	dc49      	bgt.n	8005730 <UART_SetConfig+0x9d4>
 800569c:	2b00      	cmp	r3, #0
 800569e:	db7c      	blt.n	800579a <UART_SetConfig+0xa3e>
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d87a      	bhi.n	800579a <UART_SetConfig+0xa3e>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x950>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	08005737 	.word	0x08005737
 80056b0:	0800573f 	.word	0x0800573f
 80056b4:	0800579b 	.word	0x0800579b
 80056b8:	0800579b 	.word	0x0800579b
 80056bc:	08005747 	.word	0x08005747
 80056c0:	0800579b 	.word	0x0800579b
 80056c4:	0800579b 	.word	0x0800579b
 80056c8:	0800579b 	.word	0x0800579b
 80056cc:	08005757 	.word	0x08005757
 80056d0:	0800579b 	.word	0x0800579b
 80056d4:	0800579b 	.word	0x0800579b
 80056d8:	0800579b 	.word	0x0800579b
 80056dc:	0800579b 	.word	0x0800579b
 80056e0:	0800579b 	.word	0x0800579b
 80056e4:	0800579b 	.word	0x0800579b
 80056e8:	0800579b 	.word	0x0800579b
 80056ec:	08005767 	.word	0x08005767
 80056f0:	0800579b 	.word	0x0800579b
 80056f4:	0800579b 	.word	0x0800579b
 80056f8:	0800579b 	.word	0x0800579b
 80056fc:	0800579b 	.word	0x0800579b
 8005700:	0800579b 	.word	0x0800579b
 8005704:	0800579b 	.word	0x0800579b
 8005708:	0800579b 	.word	0x0800579b
 800570c:	0800579b 	.word	0x0800579b
 8005710:	0800579b 	.word	0x0800579b
 8005714:	0800579b 	.word	0x0800579b
 8005718:	0800579b 	.word	0x0800579b
 800571c:	0800579b 	.word	0x0800579b
 8005720:	0800579b 	.word	0x0800579b
 8005724:	0800579b 	.word	0x0800579b
 8005728:	0800579b 	.word	0x0800579b
 800572c:	0800578d 	.word	0x0800578d
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d02e      	beq.n	8005792 <UART_SetConfig+0xa36>
 8005734:	e031      	b.n	800579a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005736:	f7fd fe97 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 800573a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800573c:	e033      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800573e:	f7fd fea9 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 8005742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005744:	e02f      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fe14 	bl	8004378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005754:	e027      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005756:	f107 0318 	add.w	r3, r7, #24
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe ff60 	bl	8004620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005764:	e01f      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005766:	4b2d      	ldr	r3, [pc, #180]	; (800581c <UART_SetConfig+0xac0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005772:	4b2a      	ldr	r3, [pc, #168]	; (800581c <UART_SetConfig+0xac0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	08db      	lsrs	r3, r3, #3
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	4a28      	ldr	r2, [pc, #160]	; (8005820 <UART_SetConfig+0xac4>)
 800577e:	fa22 f303 	lsr.w	r3, r2, r3
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005784:	e00f      	b.n	80057a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005786:	4b26      	ldr	r3, [pc, #152]	; (8005820 <UART_SetConfig+0xac4>)
 8005788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800578a:	e00c      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800578c:	4b25      	ldr	r3, [pc, #148]	; (8005824 <UART_SetConfig+0xac8>)
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005790:	e009      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005798:	e005      	b.n	80057a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057a4:	bf00      	nop
    }

    if (pclk != 0U)
 80057a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d021      	beq.n	80057f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <UART_SetConfig+0xacc>)
 80057b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b6:	461a      	mov	r2, r3
 80057b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	441a      	add	r2, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	2b0f      	cmp	r3, #15
 80057d4:	d909      	bls.n	80057ea <UART_SetConfig+0xa8e>
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057dc:	d205      	bcs.n	80057ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60da      	str	r2, [r3, #12]
 80057e8:	e002      	b.n	80057f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2200      	movs	r2, #0
 8005804:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2200      	movs	r2, #0
 800580a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800580c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005810:	4618      	mov	r0, r3
 8005812:	3748      	adds	r7, #72	; 0x48
 8005814:	46bd      	mov	sp, r7
 8005816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800581a:	bf00      	nop
 800581c:	58024400 	.word	0x58024400
 8005820:	03d09000 	.word	0x03d09000
 8005824:	003d0900 	.word	0x003d0900
 8005828:	08005f2c 	.word	0x08005f2c

0800582c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01a      	beq.n	8005942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592a:	d10a      	bne.n	8005942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
  }
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af02      	add	r7, sp, #8
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005980:	f7fb fb94 	bl	80010ac <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b08      	cmp	r3, #8
 8005992:	d10e      	bne.n	80059b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f82f 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e025      	b.n	80059fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d10e      	bne.n	80059de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f819 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e00f      	b.n	80059fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b09c      	sub	sp, #112	; 0x70
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a16:	e0a9      	b.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	f000 80a5 	beq.w	8005b6c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fb fb43 	bl	80010ac <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d140      	bne.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e6      	bne.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	663b      	str	r3, [r7, #96]	; 0x60
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e069      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d051      	beq.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad6:	d149      	bne.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
 8005b02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	613b      	str	r3, [r7, #16]
   return(result);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b34:	623a      	str	r2, [r7, #32]
 8005b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	69f9      	ldr	r1, [r7, #28]
 8005b3a:	6a3a      	ldr	r2, [r7, #32]
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e5      	bne.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e010      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69da      	ldr	r2, [r3, #28]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4013      	ands	r3, r2
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	bf0c      	ite	eq
 8005b7c:	2301      	moveq	r3, #1
 8005b7e:	2300      	movne	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	f43f af46 	beq.w	8005a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3770      	adds	r7, #112	; 0x70
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_UARTEx_DisableFifoMode+0x16>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e027      	b.n	8005bfc <HAL_UARTEx_DisableFifoMode+0x66>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2224      	movs	r2, #36	; 0x24
 8005bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e02d      	b.n	8005c7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	; 0x24
 8005c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f84f 	bl	8005d00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e02d      	b.n	8005cf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2224      	movs	r2, #36	; 0x24
 8005ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f811 	bl	8005d00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d108      	bne.n	8005d22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d20:	e031      	b.n	8005d86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d22:	2310      	movs	r3, #16
 8005d24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d26:	2310      	movs	r3, #16
 8005d28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	0e5b      	lsrs	r3, r3, #25
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	0f5b      	lsrs	r3, r3, #29
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	7b3a      	ldrb	r2, [r7, #12]
 8005d4e:	4911      	ldr	r1, [pc, #68]	; (8005d94 <UARTEx_SetNbDataToProcess+0x94>)
 8005d50:	5c8a      	ldrb	r2, [r1, r2]
 8005d52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d56:	7b3a      	ldrb	r2, [r7, #12]
 8005d58:	490f      	ldr	r1, [pc, #60]	; (8005d98 <UARTEx_SetNbDataToProcess+0x98>)
 8005d5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	7b7a      	ldrb	r2, [r7, #13]
 8005d6c:	4909      	ldr	r1, [pc, #36]	; (8005d94 <UARTEx_SetNbDataToProcess+0x94>)
 8005d6e:	5c8a      	ldrb	r2, [r1, r2]
 8005d70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d74:	7b7a      	ldrb	r2, [r7, #13]
 8005d76:	4908      	ldr	r1, [pc, #32]	; (8005d98 <UARTEx_SetNbDataToProcess+0x98>)
 8005d78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	08005f44 	.word	0x08005f44
 8005d98:	08005f4c 	.word	0x08005f4c

08005d9c <__cxa_pure_virtual>:
 8005d9c:	b508      	push	{r3, lr}
 8005d9e:	f000 f80d 	bl	8005dbc <_ZSt9terminatev>

08005da2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005da2:	b508      	push	{r3, lr}
 8005da4:	4780      	blx	r0
 8005da6:	f000 f80e 	bl	8005dc6 <abort>
	...

08005dac <_ZSt13get_terminatev>:
 8005dac:	4b02      	ldr	r3, [pc, #8]	; (8005db8 <_ZSt13get_terminatev+0xc>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	f3bf 8f5b 	dmb	ish
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	24000010 	.word	0x24000010

08005dbc <_ZSt9terminatev>:
 8005dbc:	b508      	push	{r3, lr}
 8005dbe:	f7ff fff5 	bl	8005dac <_ZSt13get_terminatev>
 8005dc2:	f7ff ffee 	bl	8005da2 <_ZN10__cxxabiv111__terminateEPFvvE>

08005dc6 <abort>:
 8005dc6:	b508      	push	{r3, lr}
 8005dc8:	2006      	movs	r0, #6
 8005dca:	f000 f85d 	bl	8005e88 <raise>
 8005dce:	2001      	movs	r0, #1
 8005dd0:	f7fb f8b2 	bl	8000f38 <_exit>

08005dd4 <__errno>:
 8005dd4:	4b01      	ldr	r3, [pc, #4]	; (8005ddc <__errno+0x8>)
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	24000014 	.word	0x24000014

08005de0 <__libc_init_array>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	4d0d      	ldr	r5, [pc, #52]	; (8005e18 <__libc_init_array+0x38>)
 8005de4:	4c0d      	ldr	r4, [pc, #52]	; (8005e1c <__libc_init_array+0x3c>)
 8005de6:	1b64      	subs	r4, r4, r5
 8005de8:	10a4      	asrs	r4, r4, #2
 8005dea:	2600      	movs	r6, #0
 8005dec:	42a6      	cmp	r6, r4
 8005dee:	d109      	bne.n	8005e04 <__libc_init_array+0x24>
 8005df0:	4d0b      	ldr	r5, [pc, #44]	; (8005e20 <__libc_init_array+0x40>)
 8005df2:	4c0c      	ldr	r4, [pc, #48]	; (8005e24 <__libc_init_array+0x44>)
 8005df4:	f000 f864 	bl	8005ec0 <_init>
 8005df8:	1b64      	subs	r4, r4, r5
 8005dfa:	10a4      	asrs	r4, r4, #2
 8005dfc:	2600      	movs	r6, #0
 8005dfe:	42a6      	cmp	r6, r4
 8005e00:	d105      	bne.n	8005e0e <__libc_init_array+0x2e>
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e08:	4798      	blx	r3
 8005e0a:	3601      	adds	r6, #1
 8005e0c:	e7ee      	b.n	8005dec <__libc_init_array+0xc>
 8005e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e12:	4798      	blx	r3
 8005e14:	3601      	adds	r6, #1
 8005e16:	e7f2      	b.n	8005dfe <__libc_init_array+0x1e>
 8005e18:	08005f5c 	.word	0x08005f5c
 8005e1c:	08005f5c 	.word	0x08005f5c
 8005e20:	08005f5c 	.word	0x08005f5c
 8005e24:	08005f60 	.word	0x08005f60

08005e28 <memset>:
 8005e28:	4402      	add	r2, r0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d100      	bne.n	8005e32 <memset+0xa>
 8005e30:	4770      	bx	lr
 8005e32:	f803 1b01 	strb.w	r1, [r3], #1
 8005e36:	e7f9      	b.n	8005e2c <memset+0x4>

08005e38 <_raise_r>:
 8005e38:	291f      	cmp	r1, #31
 8005e3a:	b538      	push	{r3, r4, r5, lr}
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	460d      	mov	r5, r1
 8005e40:	d904      	bls.n	8005e4c <_raise_r+0x14>
 8005e42:	2316      	movs	r3, #22
 8005e44:	6003      	str	r3, [r0, #0]
 8005e46:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e4e:	b112      	cbz	r2, 8005e56 <_raise_r+0x1e>
 8005e50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e54:	b94b      	cbnz	r3, 8005e6a <_raise_r+0x32>
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 f830 	bl	8005ebc <_getpid_r>
 8005e5c:	462a      	mov	r2, r5
 8005e5e:	4601      	mov	r1, r0
 8005e60:	4620      	mov	r0, r4
 8005e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e66:	f000 b817 	b.w	8005e98 <_kill_r>
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d00a      	beq.n	8005e84 <_raise_r+0x4c>
 8005e6e:	1c59      	adds	r1, r3, #1
 8005e70:	d103      	bne.n	8005e7a <_raise_r+0x42>
 8005e72:	2316      	movs	r3, #22
 8005e74:	6003      	str	r3, [r0, #0]
 8005e76:	2001      	movs	r0, #1
 8005e78:	e7e7      	b.n	8005e4a <_raise_r+0x12>
 8005e7a:	2400      	movs	r4, #0
 8005e7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e80:	4628      	mov	r0, r5
 8005e82:	4798      	blx	r3
 8005e84:	2000      	movs	r0, #0
 8005e86:	e7e0      	b.n	8005e4a <_raise_r+0x12>

08005e88 <raise>:
 8005e88:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <raise+0xc>)
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	f7ff bfd3 	b.w	8005e38 <_raise_r>
 8005e92:	bf00      	nop
 8005e94:	24000014 	.word	0x24000014

08005e98 <_kill_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d07      	ldr	r5, [pc, #28]	; (8005eb8 <_kill_r+0x20>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	602b      	str	r3, [r5, #0]
 8005ea6:	f7fb f837 	bl	8000f18 <_kill>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d102      	bne.n	8005eb4 <_kill_r+0x1c>
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	b103      	cbz	r3, 8005eb4 <_kill_r+0x1c>
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	bf00      	nop
 8005eb8:	24000174 	.word	0x24000174

08005ebc <_getpid_r>:
 8005ebc:	f7fb b824 	b.w	8000f08 <_getpid>

08005ec0 <_init>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr

08005ecc <_fini>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr
